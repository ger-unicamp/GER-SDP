
SDP_2016.elf:     file format elf32-littlearm
SDP_2016.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000b35

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x000000c0 memsz 0x000000c0 flags r--
    LOAD off    0x00008400 vaddr 0x00000400 paddr 0x00000400 align 2**15
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00008410 vaddr 0x00000410 paddr 0x00000410 align 2**15
         filesz 0x000019ac memsz 0x000019ac flags rwx
    LOAD off    0x0000f000 vaddr 0x1ffff000 paddr 0x00001dbc align 2**15
         filesz 0x00000060 memsz 0x00000280 flags rw-
    LOAD off    0x0000f280 vaddr 0x1ffff280 paddr 0x00001e1c align 2**15
         filesz 0x00000018 memsz 0x00000418 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts   000000c0  00000000  00000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000010  00000400  00000400  00008400  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000199c  00000410  00000410  00008410  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM          00000008  00001dac  00001dac  00009dac  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  00001db4  00001db4  00009db4  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  00001db8  00001db8  00009db8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  1ffff000  00001dbc  0000f000  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000220  1ffff060  00001e1c  0000f060  2**2  ALLOC
  8 .romp         00000018  1ffff280  00001e1c  0000f280  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000400  1ffff298  00001e34  0000f298  2**0  ALLOC
 10 .ARM.attributes 00000028  00000000  00000000  0000f298  2**0  CONTENTS, READONLY
 11 .debug_info   00005848  00000000  00000000  0000f2c0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001cdd  00000000  00000000  00014b08  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005e8  00000000  00000000  000167e5  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000460  00000000  00000000  00016dcd  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00013eb4  00000000  00000000  0001722d  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005c76  00000000  00000000  0002b0e1  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00043dbb  00000000  00000000  00030d57  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment      00000070  00000000  00000000  00074b12  2**0  CONTENTS, READONLY
 19 .debug_frame  00001084  00000000  00000000  00074b84  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .interrupts	00000000 .interrupts
00000400 l    d  .cfmprotect	00000000 .cfmprotect
00000410 l    d  .text	00000000 .text
00001dac l    d  .ARM	00000000 .ARM
00001db4 l    d  .init_array	00000000 .init_array
00001db8 l    d  .fini_array	00000000 .fini_array
1ffff000 l    d  .data	00000000 .data
1ffff060 l    d  .bss	00000000 .bss
1ffff280 l    d  .romp	00000000 .romp
1ffff298 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Vectors.c
00000000 l    df *ABS*	00000000 Cpu.c
00000000 l    df *ABS*	00000000 crtstuff.c
00001d94 l     O .text	00000000 __EH_FRAME_BEGIN__
00000410 l     F .text	00000000 __do_global_dtors_aux
1ffff060 l       .bss	00000000 completed.7863
00001db8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00000438 l     F .text	00000000 frame_dummy
1ffff064 l       .bss	00000000 object.7868
00001db4 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 /opt/Freescale/KDS_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/../../../../arm-none-eabi/lib/armv6-m/crt0.o
00000000 l    df *ABS*	00000000 _udivsi3.o
000004ec l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00000588 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 CameraController.c
00000000 l    df *ABS*	00000000 Events.c
00000000 l    df *ABS*	00000000 SerialCommunication.c
1ffff07c l     O .bss	00000008 deviceData
00000854 l     F .text	00000020 init_Serial
00000874 l     F .text	00000044 sendChar
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 startup.c
00000b48 l       .text	00000000 skip_sp
00000000 l    df *ABS*	00000000 AdcLdd1.c
1ffff084 l     O .bss	00000008 DeviceDataPrv__DEFAULT_RTOS_ALLOC
1ffff08c l     O .bss	00000004 INT_ADC0__DEFAULT_RTOS_ISRPARAM
00000000 l    df *ABS*	00000000 BitIoLdd1.c
1ffff090 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 BitIoLdd2.c
1ffff094 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 BitIoLdd4.c
1ffff098 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 ClockInterruption.c
00000000 l    df *ABS*	00000000 ImageConverter.c
1ffff09d l     O .bss	00000001 ModeFlg
1ffff0a0 l     O .bss	00000001 SampleGroup
1ffff0a4 l     O .bss	00000001 OutFlg
00000000 l    df *ABS*	00000000 PwmLdd1.c
1ffff0e0 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 PwmLdd2.c
1ffff0ec l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 PwmLdd3.c
1ffff0f8 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 PwmLdd4.c
1ffff104 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 PwmLdd5.c
1ffff110 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 SerialCom.c
1ffff11c l     O .bss	00000018 DeviceDataPrv__DEFAULT_RTOS_ALLOC
1ffff134 l     O .bss	00000004 INT_UART0__DEFAULT_RTOS_ISRPARAM
00001778 l     F .text	00000058 InterruptRx
000017d0 l     F .text	00000080 InterruptTx
00000000 l    df *ABS*	00000000 TU1.c
1ffff138 l     O .bss	00000008 DeviceDataPrv__DEFAULT_RTOS_ALLOC
1ffff140 l     O .bss	00000004 INT_PIT__DEFAULT_RTOS_ISRPARAM
00000000 l    df *ABS*	00000000 TU2.c
1ffff144 l     O .bss	00000008 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TU3.c
1ffff14c l     O .bss	00000008 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TimerIntLdd1.c
1ffff154 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 impure.c
1ffff000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 /opt/Freescale/KDS_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /opt/Freescale/KDS_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 PE_LDD.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 __stack_size
00020000 l       *ABS*	00000000 text_end
1ffff000 l       .data	00000000 _sdata
00001e34 l       .fini_array	00000000 data_init_end
00001dbc l       .fini_array	00000000 ___ROM_AT
00000000 l       *ABS*	00000000 __heap_size
00001db8 l       .init_array	00000000 __init_array_end
00001db4 l       .init_array	00000000 __preinit_array_end
20003000 l       *ABS*	00000000 _estack
1ffff060 l       .data	00000000 _edata
00001db4 l       .init_array	00000000 __init_array_start
00001db4 l       .init_array	00000000 __preinit_array_start
00000de8 g     F .text	00000030 AdcLdd1_MeasurementCompleteInterrupt
1ffff160 g     O .bss	00000004 clockCounter
1ffff298 g       ._user_heap_stack	00000000 __HeapBase
00001504 g     F .text	000001b0 SerialCom_Init
00001988 g     F .text	0000002c TU1_Enable
1ffff298 g       ._user_heap_stack	00000000 __heap_addr
1ffff09c g     O .bss	00000001 SR_lock
00001454 g     F .text	00000058 PwmLdd4_Init
00001db4 g       .ARM	00000000 __exidx_end
00000f60 g     F .text	00000068 BitIoLdd4_Init
1ffff164 g     O .bss	00000004 transferTime
00000f48 g     F .text	00000018 BitIoLdd2_SetVal
00000e18 g     F .text	00000060 BitIoLdd1_Init
00001dac g       .text	00000000 _etext
00000000 g     O .interrupts	000000c0 __vect_table
00001328 g     F .text	0000002c ImageConverter_Init
00000c28 g     F .text	00000044 AdcLdd1_StartSingleMeasurement
00001db4 g       .init_array	00000000 __DTOR_END__
00001c98 g     F .text	0000002e TimerIntLdd1_Disable
000019b4 g     F .text	00000030 TU1_Disable
000004e8 g     F .text	00000088 .hidden __udivsi3
1ffff060 g       .bss	00000000 __START_BSS
1ffff298 g       ._user_heap_stack	00000000 __HeapLimit
1ffff060 g       .bss	00000000 __bss_start__
0000083c g     F .text	00000018 SerialCom_OnBlockSent
000006f0 g     F .text	00000114 ClockInterruption_OnInterrupt
00000d30 g     F .text	000000b8 AdcLdd1_GetCalibrationResultStatus
1ffff278 g     O .bss	00000001 ImageConverter_OutV
0000067c g     F .text	00000030 initializeCamera
00000b34 g     F .text	00000030 __thumb_startup
000008b8 g     F .text	0000009a itoa_8_bit
000006ac g     F .text	0000003c testMode
00001dac g       .ARM	00000000 __exidx_start
00001d90 g     O .text	00000004 _global_impure_ptr
00001298 g     F .text	00000034 ImageConverter_GetValue
00001d18 g     F .text	0000004c __libc_init_array
00000b2c  w    F .text	00000008 __init_user
00000470 g     F .text	00000000 _mainCRTStartup
1ffff170 g     O .bss	00000001 serialTest
00001d94 g     F .text	00000000 _init
1ffff168 g     O .bss	00000004 state
00001c68 g     F .text	0000002e TimerIntLdd1_Enable
00000000  w      *UND*	00000000 __libc_fini_array
000013a8 g     F .text	00000058 PwmLdd2_Init
00000ff4 g     F .text	00000110 __init_hardware
00000ed0 g     F .text	00000060 BitIoLdd2_Init
00001850 g     F .text	00000064 SerialCom_Interrupt
00001cc8 g     F .text	00000024 TU1_OnCounterRestart
1ffff27c g     O .bss	00000004 AdcLdd1_DeviceDataPtr
00000ea0 g     F .text	00000018 BitIoLdd1_ClrVal
00000000  w      *UND*	00000000 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
00000584 g     F .text	00000000 .hidden __aeabi_idiv
000009b4 g     F .text	000000d6 __copy_rom_section
000006e8 g     F .text	00000008 Cpu_OnNMIINT
00001db4 g       .init_array	00000000 __CTOR_LIST__
1ffff280 g       .bss	00000000 __bss_end__
00000000  w      *UND*	00000000 __call_exitprocs
00000f30 g     F .text	00000018 BitIoLdd2_ClrVal
00000470 g     F .text	00000000 _start
00000b64 g     F .text	000000c4 AdcLdd1_Init
00000eb8 g     F .text	00000018 BitIoLdd1_SetVal
00000400 g     O .cfmprotect	00000010 _cfm
0000082c g     F .text	0000000e SerialCom_OnBlockReceived
00000000 g       .interrupts	00000000 __vector_table
20003000 g       *ABS*	00000000 __SP_INIT
00000000  w      *UND*	00000000 software_init_hook
00000c6c g     F .text	00000064 AdcLdd1_CreateSampleGroup
00000824 g     F .text	00000008 ImageConverter_OnCalibrationEnd
00001104 g     F .text	00000104 PE_low_level_init
00000644  w    F .text	00000002 .hidden __aeabi_ldiv0
00000cd0 g     F .text	00000060 AdcLdd1_GetMeasuredValues
00000a8c g     F .text	00000098 __copy_rom_sections_to_ram
00000000  w      *UND*	00000000 __sf_fake_stdin
1ffff274 g     O .bss	00000001 SR_reg
00001d64 g     F .text	00000010 memset
000009a4 g     F .text	00000010 main
00000804 g     F .text	00000020 ImageConverter_OnEnd
000012cc g     F .text	0000005c AdcLdd1_OnMeasurementComplete
000004e8 g     F .text	00000000 .hidden __aeabi_uidiv
00000fe8 g     F .text	0000000a Cpu_Interrupt
1ffff0a8 g     O .bss	00000038 PE_LDD_DeviceDataList
00000000  w      *UND*	00000000 hardware_init_hook
00001354 g     F .text	00000054 PwmLdd1_Init
00000fc8 g     F .text	00000012 TimerIntLdd1_OnInterrupt
00001400 g     F .text	00000054 PwmLdd3_Init
00000584 g     F .text	000000ac .hidden __divsi3
00001db4 g       .init_array	00000000 __CTOR_END__
00001db4 g       .init_array	00000000 __DTOR_LIST__
1ffff280 g       .bss	00000000 __END_BSS
00001da0 g     F .text	00000000 _fini
00001e1c g       .fini_array	00000000 _romp_at
00001a1c g     F .text	00000138 TU2_Init
00000000  w      *UND*	00000000 atexit
1ffff171 g     O .bss	00000001 serialFinished
1ffff16c g     O .bss	00000004 measuringCounter
1ffff172 g     O .bss	00000001 serialTestStart
1ffff000 g       .data	00000000 _mtb_end
00000954 g     F .text	00000050 sendArrayOfPixels
000019e4 g     F .text	00000038 TU1_Interrupt
00000648 g     F .text	00000034 cameraStartReading
00001e1c g       .fini_array	00000000 __S_romp
00001208 g     F .text	00000048 ImageConverter_HWEnDi
20003000 g       *ABS*	00000000 __stack
00000570 g     F .text	00000012 .hidden __aeabi_uidivmod
00001250 g     F .text	00000048 ImageConverter_Measure
00000e78 g     F .text	00000028 BitIoLdd1_GetVal
00001cec g     F .text	0000002c exit
00001b54 g     F .text	000000c4 TU3_Init
00000b24  w    F .text	00000008 __init_registers
1ffff000 g       .data	00000000 _mtb_start
00000000  w      *UND*	00000000 __sf_fake_stdout
00001c18 g     F .text	00000050 TimerIntLdd1_Init
000018b4 g     F .text	000000d4 TU1_Init
00000644  w    F .text	00000002 .hidden __aeabi_idiv0
000014ac g     F .text	00000058 PwmLdd5_Init
00001d74 g     F .text	00000002 _exit
000016b4 g     F .text	000000c4 SerialCom_SendBlock
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1ffff174 g     O .bss	00000100 pixelArray
00000630 g     F .text	00000012 .hidden __aeabi_idivmod
00000060 g       *ABS*	00000000 ___data_size
00000fdc g     F .text	0000000c Cpu_INT_NMIInterrupt
00000000  w      *UND*	00000000 __register_frame_info



Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
$t():
     410:	b510      	push	{r4, lr}
     412:	4c06      	ldr	r4, [pc, #24]	; (42c <__do_global_dtors_aux+0x1c>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	2b00      	cmp	r3, #0
     418:	d107      	bne.n	42a <__do_global_dtors_aux+0x1a>
     41a:	4b05      	ldr	r3, [pc, #20]	; (430 <__do_global_dtors_aux+0x20>)
     41c:	2b00      	cmp	r3, #0
     41e:	d002      	beq.n	426 <__do_global_dtors_aux+0x16>
     420:	4804      	ldr	r0, [pc, #16]	; (434 <__do_global_dtors_aux+0x24>)
     422:	e000      	b.n	426 <__do_global_dtors_aux+0x16>
     424:	bf00      	nop
     426:	2301      	movs	r3, #1
     428:	7023      	strb	r3, [r4, #0]
     42a:	bd10      	pop	{r4, pc}
$d():
     42c:	1ffff060 	.word	0x1ffff060
     430:	00000000 	.word	0x00000000
     434:	00001d94 	.word	0x00001d94

00000438 <frame_dummy>:
$t():
     438:	b508      	push	{r3, lr}
     43a:	4b08      	ldr	r3, [pc, #32]	; (45c <frame_dummy+0x24>)
     43c:	2b00      	cmp	r3, #0
     43e:	d003      	beq.n	448 <frame_dummy+0x10>
     440:	4807      	ldr	r0, [pc, #28]	; (460 <frame_dummy+0x28>)
     442:	4908      	ldr	r1, [pc, #32]	; (464 <frame_dummy+0x2c>)
     444:	e000      	b.n	448 <frame_dummy+0x10>
     446:	bf00      	nop
     448:	4807      	ldr	r0, [pc, #28]	; (468 <frame_dummy+0x30>)
     44a:	6803      	ldr	r3, [r0, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d003      	beq.n	458 <frame_dummy+0x20>
     450:	4b06      	ldr	r3, [pc, #24]	; (46c <frame_dummy+0x34>)
     452:	2b00      	cmp	r3, #0
     454:	d000      	beq.n	458 <frame_dummy+0x20>
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	46c0      	nop			; (mov r8, r8)
$d():
     45c:	00000000 	.word	0x00000000
     460:	00001d94 	.word	0x00001d94
     464:	1ffff064 	.word	0x1ffff064
     468:	1ffff060 	.word	0x1ffff060
     46c:	00000000 	.word	0x00000000

00000470 <_mainCRTStartup>:
$t():
     470:	4b16      	ldr	r3, [pc, #88]	; (4cc <_mainCRTStartup+0x5c>)
     472:	2b00      	cmp	r3, #0
     474:	d100      	bne.n	478 <_mainCRTStartup+0x8>
     476:	4b14      	ldr	r3, [pc, #80]	; (4c8 <_mainCRTStartup+0x58>)
     478:	469d      	mov	sp, r3
     47a:	2240      	movs	r2, #64	; 0x40
     47c:	0292      	lsls	r2, r2, #10
     47e:	1a9a      	subs	r2, r3, r2
     480:	4692      	mov	sl, r2
     482:	2100      	movs	r1, #0
     484:	468b      	mov	fp, r1
     486:	460f      	mov	r7, r1
     488:	4813      	ldr	r0, [pc, #76]	; (4d8 <_mainCRTStartup+0x68>)
     48a:	4a14      	ldr	r2, [pc, #80]	; (4dc <_mainCRTStartup+0x6c>)
     48c:	1a12      	subs	r2, r2, r0
     48e:	f001 fc69 	bl	1d64 <memset>
     492:	4b0f      	ldr	r3, [pc, #60]	; (4d0 <_mainCRTStartup+0x60>)
     494:	2b00      	cmp	r3, #0
     496:	d000      	beq.n	49a <_mainCRTStartup+0x2a>
     498:	4798      	blx	r3
     49a:	4b0e      	ldr	r3, [pc, #56]	; (4d4 <_mainCRTStartup+0x64>)
     49c:	2b00      	cmp	r3, #0
     49e:	d000      	beq.n	4a2 <_mainCRTStartup+0x32>
     4a0:	4798      	blx	r3
     4a2:	2000      	movs	r0, #0
     4a4:	2100      	movs	r1, #0
     4a6:	0004      	movs	r4, r0
     4a8:	000d      	movs	r5, r1
     4aa:	480d      	ldr	r0, [pc, #52]	; (4e0 <_mainCRTStartup+0x70>)
     4ac:	2800      	cmp	r0, #0
     4ae:	d002      	beq.n	4b6 <_mainCRTStartup+0x46>
     4b0:	480c      	ldr	r0, [pc, #48]	; (4e4 <_mainCRTStartup+0x74>)
     4b2:	e000      	b.n	4b6 <_mainCRTStartup+0x46>
     4b4:	bf00      	nop
     4b6:	f001 fc2f 	bl	1d18 <__libc_init_array>
     4ba:	0020      	movs	r0, r4
     4bc:	0029      	movs	r1, r5
     4be:	f000 fa71 	bl	9a4 <main>
     4c2:	f001 fc13 	bl	1cec <exit>
     4c6:	46c0      	nop			; (mov r8, r8)
$d():
     4c8:	00080000 	.word	0x00080000
     4cc:	20003000 	.word	0x20003000
	...
     4d8:	1ffff060 	.word	0x1ffff060
     4dc:	1ffff280 	.word	0x1ffff280
	...

000004e8 <__aeabi_uidiv>:
__udivsi3():
     4e8:	2900      	cmp	r1, #0
     4ea:	d034      	beq.n	556 <.udivsi3_skip_div0_test+0x6a>

000004ec <.udivsi3_skip_div0_test>:
     4ec:	2301      	movs	r3, #1
     4ee:	2200      	movs	r2, #0
     4f0:	b410      	push	{r4}
     4f2:	4288      	cmp	r0, r1
     4f4:	d32c      	bcc.n	550 <.udivsi3_skip_div0_test+0x64>
     4f6:	2401      	movs	r4, #1
     4f8:	0724      	lsls	r4, r4, #28
     4fa:	42a1      	cmp	r1, r4
     4fc:	d204      	bcs.n	508 <.udivsi3_skip_div0_test+0x1c>
     4fe:	4281      	cmp	r1, r0
     500:	d202      	bcs.n	508 <.udivsi3_skip_div0_test+0x1c>
     502:	0109      	lsls	r1, r1, #4
     504:	011b      	lsls	r3, r3, #4
     506:	e7f8      	b.n	4fa <.udivsi3_skip_div0_test+0xe>
     508:	00e4      	lsls	r4, r4, #3
     50a:	42a1      	cmp	r1, r4
     50c:	d204      	bcs.n	518 <.udivsi3_skip_div0_test+0x2c>
     50e:	4281      	cmp	r1, r0
     510:	d202      	bcs.n	518 <.udivsi3_skip_div0_test+0x2c>
     512:	0049      	lsls	r1, r1, #1
     514:	005b      	lsls	r3, r3, #1
     516:	e7f8      	b.n	50a <.udivsi3_skip_div0_test+0x1e>
     518:	4288      	cmp	r0, r1
     51a:	d301      	bcc.n	520 <.udivsi3_skip_div0_test+0x34>
     51c:	1a40      	subs	r0, r0, r1
     51e:	431a      	orrs	r2, r3
     520:	084c      	lsrs	r4, r1, #1
     522:	42a0      	cmp	r0, r4
     524:	d302      	bcc.n	52c <.udivsi3_skip_div0_test+0x40>
     526:	1b00      	subs	r0, r0, r4
     528:	085c      	lsrs	r4, r3, #1
     52a:	4322      	orrs	r2, r4
     52c:	088c      	lsrs	r4, r1, #2
     52e:	42a0      	cmp	r0, r4
     530:	d302      	bcc.n	538 <.udivsi3_skip_div0_test+0x4c>
     532:	1b00      	subs	r0, r0, r4
     534:	089c      	lsrs	r4, r3, #2
     536:	4322      	orrs	r2, r4
     538:	08cc      	lsrs	r4, r1, #3
     53a:	42a0      	cmp	r0, r4
     53c:	d302      	bcc.n	544 <.udivsi3_skip_div0_test+0x58>
     53e:	1b00      	subs	r0, r0, r4
     540:	08dc      	lsrs	r4, r3, #3
     542:	4322      	orrs	r2, r4
     544:	2800      	cmp	r0, #0
     546:	d003      	beq.n	550 <.udivsi3_skip_div0_test+0x64>
     548:	091b      	lsrs	r3, r3, #4
     54a:	d001      	beq.n	550 <.udivsi3_skip_div0_test+0x64>
     54c:	0909      	lsrs	r1, r1, #4
     54e:	e7e3      	b.n	518 <.udivsi3_skip_div0_test+0x2c>
     550:	1c10      	adds	r0, r2, #0
     552:	bc10      	pop	{r4}
     554:	4770      	bx	lr
     556:	2800      	cmp	r0, #0
     558:	d001      	beq.n	55e <.udivsi3_skip_div0_test+0x72>
     55a:	2000      	movs	r0, #0
     55c:	43c0      	mvns	r0, r0
     55e:	b407      	push	{r0, r1, r2}
     560:	4802      	ldr	r0, [pc, #8]	; (56c <.udivsi3_skip_div0_test+0x80>)
     562:	a102      	add	r1, pc, #8	; (adr r1, 56c <.udivsi3_skip_div0_test+0x80>)
     564:	1840      	adds	r0, r0, r1
     566:	9002      	str	r0, [sp, #8]
     568:	bd03      	pop	{r0, r1, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	000000d9 	.word	0x000000d9

00000570 <__aeabi_uidivmod>:
__aeabi_uidivmod():
     570:	2900      	cmp	r1, #0
     572:	d0f0      	beq.n	556 <.udivsi3_skip_div0_test+0x6a>
     574:	b503      	push	{r0, r1, lr}
     576:	f7ff ffb9 	bl	4ec <.udivsi3_skip_div0_test>
     57a:	bc0e      	pop	{r1, r2, r3}
     57c:	4342      	muls	r2, r0
     57e:	1a89      	subs	r1, r1, r2
     580:	4718      	bx	r3
     582:	46c0      	nop			; (mov r8, r8)

00000584 <__aeabi_idiv>:
__divsi3():
     584:	2900      	cmp	r1, #0
     586:	d041      	beq.n	60c <.divsi3_skip_div0_test+0x84>

00000588 <.divsi3_skip_div0_test>:
     588:	b410      	push	{r4}
     58a:	1c04      	adds	r4, r0, #0
     58c:	404c      	eors	r4, r1
     58e:	46a4      	mov	ip, r4
     590:	2301      	movs	r3, #1
     592:	2200      	movs	r2, #0
     594:	2900      	cmp	r1, #0
     596:	d500      	bpl.n	59a <.divsi3_skip_div0_test+0x12>
     598:	4249      	negs	r1, r1
     59a:	2800      	cmp	r0, #0
     59c:	d500      	bpl.n	5a0 <.divsi3_skip_div0_test+0x18>
     59e:	4240      	negs	r0, r0
     5a0:	4288      	cmp	r0, r1
     5a2:	d32c      	bcc.n	5fe <.divsi3_skip_div0_test+0x76>
     5a4:	2401      	movs	r4, #1
     5a6:	0724      	lsls	r4, r4, #28
     5a8:	42a1      	cmp	r1, r4
     5aa:	d204      	bcs.n	5b6 <.divsi3_skip_div0_test+0x2e>
     5ac:	4281      	cmp	r1, r0
     5ae:	d202      	bcs.n	5b6 <.divsi3_skip_div0_test+0x2e>
     5b0:	0109      	lsls	r1, r1, #4
     5b2:	011b      	lsls	r3, r3, #4
     5b4:	e7f8      	b.n	5a8 <.divsi3_skip_div0_test+0x20>
     5b6:	00e4      	lsls	r4, r4, #3
     5b8:	42a1      	cmp	r1, r4
     5ba:	d204      	bcs.n	5c6 <.divsi3_skip_div0_test+0x3e>
     5bc:	4281      	cmp	r1, r0
     5be:	d202      	bcs.n	5c6 <.divsi3_skip_div0_test+0x3e>
     5c0:	0049      	lsls	r1, r1, #1
     5c2:	005b      	lsls	r3, r3, #1
     5c4:	e7f8      	b.n	5b8 <.divsi3_skip_div0_test+0x30>
     5c6:	4288      	cmp	r0, r1
     5c8:	d301      	bcc.n	5ce <.divsi3_skip_div0_test+0x46>
     5ca:	1a40      	subs	r0, r0, r1
     5cc:	431a      	orrs	r2, r3
     5ce:	084c      	lsrs	r4, r1, #1
     5d0:	42a0      	cmp	r0, r4
     5d2:	d302      	bcc.n	5da <.divsi3_skip_div0_test+0x52>
     5d4:	1b00      	subs	r0, r0, r4
     5d6:	085c      	lsrs	r4, r3, #1
     5d8:	4322      	orrs	r2, r4
     5da:	088c      	lsrs	r4, r1, #2
     5dc:	42a0      	cmp	r0, r4
     5de:	d302      	bcc.n	5e6 <.divsi3_skip_div0_test+0x5e>
     5e0:	1b00      	subs	r0, r0, r4
     5e2:	089c      	lsrs	r4, r3, #2
     5e4:	4322      	orrs	r2, r4
     5e6:	08cc      	lsrs	r4, r1, #3
     5e8:	42a0      	cmp	r0, r4
     5ea:	d302      	bcc.n	5f2 <.divsi3_skip_div0_test+0x6a>
     5ec:	1b00      	subs	r0, r0, r4
     5ee:	08dc      	lsrs	r4, r3, #3
     5f0:	4322      	orrs	r2, r4
     5f2:	2800      	cmp	r0, #0
     5f4:	d003      	beq.n	5fe <.divsi3_skip_div0_test+0x76>
     5f6:	091b      	lsrs	r3, r3, #4
     5f8:	d001      	beq.n	5fe <.divsi3_skip_div0_test+0x76>
     5fa:	0909      	lsrs	r1, r1, #4
     5fc:	e7e3      	b.n	5c6 <.divsi3_skip_div0_test+0x3e>
     5fe:	1c10      	adds	r0, r2, #0
     600:	4664      	mov	r4, ip
     602:	2c00      	cmp	r4, #0
     604:	d500      	bpl.n	608 <.divsi3_skip_div0_test+0x80>
     606:	4240      	negs	r0, r0
     608:	bc10      	pop	{r4}
     60a:	4770      	bx	lr
     60c:	2800      	cmp	r0, #0
     60e:	d006      	beq.n	61e <.divsi3_skip_div0_test+0x96>
     610:	db03      	blt.n	61a <.divsi3_skip_div0_test+0x92>
     612:	2000      	movs	r0, #0
     614:	43c0      	mvns	r0, r0
     616:	0840      	lsrs	r0, r0, #1
     618:	e001      	b.n	61e <.divsi3_skip_div0_test+0x96>
     61a:	2080      	movs	r0, #128	; 0x80
     61c:	0600      	lsls	r0, r0, #24
     61e:	b407      	push	{r0, r1, r2}
     620:	4802      	ldr	r0, [pc, #8]	; (62c <.divsi3_skip_div0_test+0xa4>)
     622:	a102      	add	r1, pc, #8	; (adr r1, 62c <.divsi3_skip_div0_test+0xa4>)
     624:	1840      	adds	r0, r0, r1
     626:	9002      	str	r0, [sp, #8]
     628:	bd03      	pop	{r0, r1, pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	00000019 	.word	0x00000019

00000630 <__aeabi_idivmod>:
__aeabi_idivmod():
     630:	2900      	cmp	r1, #0
     632:	d0eb      	beq.n	60c <.divsi3_skip_div0_test+0x84>
     634:	b503      	push	{r0, r1, lr}
     636:	f7ff ffa7 	bl	588 <.divsi3_skip_div0_test>
     63a:	bc0e      	pop	{r1, r2, r3}
     63c:	4342      	muls	r2, r0
     63e:	1a89      	subs	r1, r1, r2
     640:	4718      	bx	r3
     642:	46c0      	nop			; (mov r8, r8)

00000644 <__aeabi_idiv0>:
__aeabi_ldiv0():
     644:	4770      	bx	lr
     646:	46c0      	nop			; (mov r8, r8)

00000648 <cameraStartReading>:
cameraStartReading():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:27
 **							-> TRUE: For it starts the serial communication.
 **
 **
 ** ===================================================================*/
void cameraStartReading(bool serialTest)
{
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	1c02      	adds	r2, r0, #0
     650:	1dfb      	adds	r3, r7, #7
     652:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:28
	if (serialTest == TRUE)
     654:	1dfb      	adds	r3, r7, #7
     656:	781b      	ldrb	r3, [r3, #0]
     658:	2b01      	cmp	r3, #1
     65a:	d102      	bne.n	662 <cameraStartReading+0x1a>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:30
	{
		testMode();
     65c:	f000 f826 	bl	6ac <testMode>
     660:	e006      	b.n	670 <cameraStartReading+0x28>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:36
	}

	else
	{
		// Initializes the camera
		initializeCamera();
     662:	f000 f80b 	bl	67c <initializeCamera>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:39

		// Camera activation
		ClockInterruption_Enable();
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <cameraStartReading+0x30>)
     668:	68db      	ldr	r3, [r3, #12]
     66a:	1c18      	adds	r0, r3, #0
     66c:	f001 fafc 	bl	1c68 <TimerIntLdd1_Enable>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:42
	}

}
     670:	46bd      	mov	sp, r7
     672:	b002      	add	sp, #8
     674:	bd80      	pop	{r7, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	1ffff0a8 	.word	0x1ffff0a8

0000067c <initializeCamera>:
initializeCamera():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:45

void initializeCamera()
{
     67c:	b580      	push	{r7, lr}
     67e:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:47
	// Inicial state
	state = HALF_LOW_CLK;
     680:	4b06      	ldr	r3, [pc, #24]	; (69c <initializeCamera+0x20>)
     682:	2203      	movs	r2, #3
     684:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:49

	clockCounter = 0;
     686:	4b06      	ldr	r3, [pc, #24]	; (6a0 <initializeCamera+0x24>)
     688:	2200      	movs	r2, #0
     68a:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:51

	transferTime = 0;
     68c:	4b05      	ldr	r3, [pc, #20]	; (6a4 <initializeCamera+0x28>)
     68e:	2200      	movs	r2, #0
     690:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:53
	// Number of samples
	measuringCounter = 0;
     692:	4b05      	ldr	r3, [pc, #20]	; (6a8 <initializeCamera+0x2c>)
     694:	2200      	movs	r2, #0
     696:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:54
}
     698:	46bd      	mov	sp, r7
     69a:	bd80      	pop	{r7, pc}
     69c:	1ffff168 	.word	0x1ffff168
     6a0:	1ffff160 	.word	0x1ffff160
     6a4:	1ffff164 	.word	0x1ffff164
     6a8:	1ffff16c 	.word	0x1ffff16c

000006ac <testMode>:
testMode():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:58

// Serial Communication Mode.
void testMode()
{
     6ac:	b580      	push	{r7, lr}
     6ae:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:62
	while(TRUE)
	{
		// Initializes the camera
		initializeCamera();
     6b0:	f7ff ffe4 	bl	67c <initializeCamera>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:65

		// Camera activation
		ClockInterruption_Enable();
     6b4:	4b09      	ldr	r3, [pc, #36]	; (6dc <testMode+0x30>)
     6b6:	68db      	ldr	r3, [r3, #12]
     6b8:	1c18      	adds	r0, r3, #0
     6ba:	f001 fad5 	bl	1c68 <TimerIntLdd1_Enable>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:68

		// Expects the camera to finish N readings
		while (measuringCounter != 10);
     6be:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:68 (discriminator 1)
     6c0:	4b07      	ldr	r3, [pc, #28]	; (6e0 <testMode+0x34>)
     6c2:	681b      	ldr	r3, [r3, #0]
     6c4:	2b0a      	cmp	r3, #10
     6c6:	d1fb      	bne.n	6c0 <testMode+0x14>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:71

		// disable the camera
		ClockInterruption_Disable();
     6c8:	4b04      	ldr	r3, [pc, #16]	; (6dc <testMode+0x30>)
     6ca:	68db      	ldr	r3, [r3, #12]
     6cc:	1c18      	adds	r0, r3, #0
     6ce:	f001 fae3 	bl	1c98 <TimerIntLdd1_Disable>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:74

		// send array by serial communication
		sendArrayOfPixels(pixelArray[0]);
     6d2:	4b04      	ldr	r3, [pc, #16]	; (6e4 <testMode+0x38>)
     6d4:	1c18      	adds	r0, r3, #0
     6d6:	f000 f93d 	bl	954 <sendArrayOfPixels>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/CameraController.c:75
	}
     6da:	e7e9      	b.n	6b0 <testMode+0x4>
     6dc:	1ffff0a8 	.word	0x1ffff0a8
     6e0:	1ffff16c 	.word	0x1ffff16c
     6e4:	1ffff174 	.word	0x1ffff174

000006e8 <Cpu_OnNMIINT>:
Cpu_OnNMIINT():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:53
 **         occurred. This event is automatically enabled when the [NMI
 **         interrupt] property is set to 'Enabled'.
 */
/* ===================================================================*/
void Cpu_OnNMIINT(void)
{
     6e8:	b580      	push	{r7, lr}
     6ea:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:55
	/* Write your code here ... */
}
     6ec:	46bd      	mov	sp, r7
     6ee:	bd80      	pop	{r7, pc}

000006f0 <ClockInterruption_OnInterrupt>:
ClockInterruption_OnInterrupt():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:72
 **     Parameters  : None
 **     Returns     : Nothing
 ** ===================================================================
 */
void ClockInterruption_OnInterrupt(void)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:73
	switch (state)
     6f4:	4b3d      	ldr	r3, [pc, #244]	; (7ec <ClockInterruption_OnInterrupt+0xfc>)
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	2b04      	cmp	r3, #4
     6fa:	d900      	bls.n	6fe <ClockInterruption_OnInterrupt+0xe>
     6fc:	e074      	b.n	7e8 <ClockInterruption_OnInterrupt+0xf8>
     6fe:	009a      	lsls	r2, r3, #2
     700:	4b3b      	ldr	r3, [pc, #236]	; (7f0 <ClockInterruption_OnInterrupt+0x100>)
     702:	18d3      	adds	r3, r2, r3
     704:	681b      	ldr	r3, [r3, #0]
     706:	469f      	mov	pc, r3
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:80

	case HALF_LOW_CLK:
	{

		// next state
		state = HIGH_CLK;
     708:	4b38      	ldr	r3, [pc, #224]	; (7ec <ClockInterruption_OnInterrupt+0xfc>)
     70a:	2200      	movs	r2, #0
     70c:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:82

		if (clockCounter == 0)
     70e:	4b39      	ldr	r3, [pc, #228]	; (7f4 <ClockInterruption_OnInterrupt+0x104>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	2b00      	cmp	r3, #0
     714:	d10e      	bne.n	734 <ClockInterruption_OnInterrupt+0x44>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:85
		{
			// SI High.
			SI_SetVal();
     716:	4b38      	ldr	r3, [pc, #224]	; (7f8 <ClockInterruption_OnInterrupt+0x108>)
     718:	681b      	ldr	r3, [r3, #0]
     71a:	1c18      	adds	r0, r3, #0
     71c:	f000 fbcc 	bl	eb8 <BitIoLdd1_SetVal>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:86
			while (!SI_GetVal());
     720:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:86 (discriminator 1)
     722:	4b35      	ldr	r3, [pc, #212]	; (7f8 <ClockInterruption_OnInterrupt+0x108>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	1c18      	adds	r0, r3, #0
     728:	f000 fba6 	bl	e78 <BitIoLdd1_GetVal>
     72c:	1c03      	adds	r3, r0, #0
     72e:	2b00      	cmp	r3, #0
     730:	d0f7      	beq.n	722 <ClockInterruption_OnInterrupt+0x32>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:109
			{
				measuringCounter++;
			}
		}

		break;
     732:	e059      	b.n	7e8 <ClockInterruption_OnInterrupt+0xf8>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:91
			while (!SI_GetVal());
		}

		// Fim de um ciclo.
		// A camera precisa de um clock a mais para enviar o ultimo pixel.
		else if (clockCounter == 129)
     734:	4b2f      	ldr	r3, [pc, #188]	; (7f4 <ClockInterruption_OnInterrupt+0x104>)
     736:	681b      	ldr	r3, [r3, #0]
     738:	2b81      	cmp	r3, #129	; 0x81
     73a:	d113      	bne.n	764 <ClockInterruption_OnInterrupt+0x74>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:93
		{
			clockCounter = 0;
     73c:	4b2d      	ldr	r3, [pc, #180]	; (7f4 <ClockInterruption_OnInterrupt+0x104>)
     73e:	2200      	movs	r2, #0
     740:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:95
			// E 20 microssegundos para se preparar para o proximo ciclo.
			state = WAIT_TRANSFER_CHARGE;
     742:	4b2a      	ldr	r3, [pc, #168]	; (7ec <ClockInterruption_OnInterrupt+0xfc>)
     744:	2204      	movs	r2, #4
     746:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:98

			// Updates the control samples
			if (measuringCounter < 0)
     748:	4b2c      	ldr	r3, [pc, #176]	; (7fc <ClockInterruption_OnInterrupt+0x10c>)
     74a:	681b      	ldr	r3, [r3, #0]
     74c:	2b00      	cmp	r3, #0
     74e:	da03      	bge.n	758 <ClockInterruption_OnInterrupt+0x68>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:101
			{
				// In this case happened overflow.
				measuringCounter = 0;
     750:	4b2a      	ldr	r3, [pc, #168]	; (7fc <ClockInterruption_OnInterrupt+0x10c>)
     752:	2200      	movs	r2, #0
     754:	601a      	str	r2, [r3, #0]
     756:	e005      	b.n	764 <ClockInterruption_OnInterrupt+0x74>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:105
			}
			else
			{
				measuringCounter++;
     758:	4b28      	ldr	r3, [pc, #160]	; (7fc <ClockInterruption_OnInterrupt+0x10c>)
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	1c5a      	adds	r2, r3, #1
     75e:	4b27      	ldr	r3, [pc, #156]	; (7fc <ClockInterruption_OnInterrupt+0x10c>)
     760:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:109
			}
		}

		break;
     762:	e041      	b.n	7e8 <ClockInterruption_OnInterrupt+0xf8>
     764:	e040      	b.n	7e8 <ClockInterruption_OnInterrupt+0xf8>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:114
	}
	case HIGH_CLK:
	{
		// Clock High.
		CLK_SetVal();
     766:	4b24      	ldr	r3, [pc, #144]	; (7f8 <ClockInterruption_OnInterrupt+0x108>)
     768:	685b      	ldr	r3, [r3, #4]
     76a:	1c18      	adds	r0, r3, #0
     76c:	f000 fbec 	bl	f48 <BitIoLdd2_SetVal>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:116

		clockCounter++;
     770:	4b20      	ldr	r3, [pc, #128]	; (7f4 <ClockInterruption_OnInterrupt+0x104>)
     772:	681b      	ldr	r3, [r3, #0]
     774:	1c5a      	adds	r2, r3, #1
     776:	4b1f      	ldr	r3, [pc, #124]	; (7f4 <ClockInterruption_OnInterrupt+0x104>)
     778:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:118

		state = HALF_HIGH_CLK;
     77a:	4b1c      	ldr	r3, [pc, #112]	; (7ec <ClockInterruption_OnInterrupt+0xfc>)
     77c:	2201      	movs	r2, #1
     77e:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:120

		break;
     780:	e032      	b.n	7e8 <ClockInterruption_OnInterrupt+0xf8>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:124
	}
	case HALF_HIGH_CLK:
	{
		if (clockCounter == 1)
     782:	4b1c      	ldr	r3, [pc, #112]	; (7f4 <ClockInterruption_OnInterrupt+0x104>)
     784:	681b      	ldr	r3, [r3, #0]
     786:	2b01      	cmp	r3, #1
     788:	d10d      	bne.n	7a6 <ClockInterruption_OnInterrupt+0xb6>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:127
		{
			// SI Low.
			SI_ClrVal();
     78a:	4b1b      	ldr	r3, [pc, #108]	; (7f8 <ClockInterruption_OnInterrupt+0x108>)
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	1c18      	adds	r0, r3, #0
     790:	f000 fb86 	bl	ea0 <BitIoLdd1_ClrVal>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:128
			while (SI_GetVal());
     794:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:128 (discriminator 1)
     796:	4b18      	ldr	r3, [pc, #96]	; (7f8 <ClockInterruption_OnInterrupt+0x108>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	1c18      	adds	r0, r3, #0
     79c:	f000 fb6c 	bl	e78 <BitIoLdd1_GetVal>
     7a0:	1c03      	adds	r3, r0, #0
     7a2:	2b00      	cmp	r3, #0
     7a4:	d1f7      	bne.n	796 <ClockInterruption_OnInterrupt+0xa6>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:132
		}

		// Starts the AD convertion
		ImageConverter_Measure(FALSE);
     7a6:	2000      	movs	r0, #0
     7a8:	f000 fd52 	bl	1250 <ImageConverter_Measure>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:134

		state = LOW_CLK;
     7ac:	4b0f      	ldr	r3, [pc, #60]	; (7ec <ClockInterruption_OnInterrupt+0xfc>)
     7ae:	2202      	movs	r2, #2
     7b0:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:135
		break;
     7b2:	e019      	b.n	7e8 <ClockInterruption_OnInterrupt+0xf8>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:140
	}
	case LOW_CLK:
	{
		// Clock Low.
		CLK_ClrVal();
     7b4:	4b10      	ldr	r3, [pc, #64]	; (7f8 <ClockInterruption_OnInterrupt+0x108>)
     7b6:	685b      	ldr	r3, [r3, #4]
     7b8:	1c18      	adds	r0, r3, #0
     7ba:	f000 fbb9 	bl	f30 <BitIoLdd2_ClrVal>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:142

		state = HALF_LOW_CLK;
     7be:	4b0b      	ldr	r3, [pc, #44]	; (7ec <ClockInterruption_OnInterrupt+0xfc>)
     7c0:	2203      	movs	r2, #3
     7c2:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:144

		break;
     7c4:	e010      	b.n	7e8 <ClockInterruption_OnInterrupt+0xf8>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:150
	}

	// Pixel charge transfer time
	case WAIT_TRANSFER_CHARGE:
	{
		if (transferTime)
     7c6:	4b0e      	ldr	r3, [pc, #56]	; (800 <ClockInterruption_OnInterrupt+0x110>)
     7c8:	681b      	ldr	r3, [r3, #0]
     7ca:	2b00      	cmp	r3, #0
     7cc:	d005      	beq.n	7da <ClockInterruption_OnInterrupt+0xea>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:152
		{
			transferTime++;
     7ce:	4b0c      	ldr	r3, [pc, #48]	; (800 <ClockInterruption_OnInterrupt+0x110>)
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	1c5a      	adds	r2, r3, #1
     7d4:	4b0a      	ldr	r3, [pc, #40]	; (800 <ClockInterruption_OnInterrupt+0x110>)
     7d6:	601a      	str	r2, [r3, #0]
     7d8:	e005      	b.n	7e6 <ClockInterruption_OnInterrupt+0xf6>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:156
		}
		else
		{
			transferTime = 0;
     7da:	4b09      	ldr	r3, [pc, #36]	; (800 <ClockInterruption_OnInterrupt+0x110>)
     7dc:	2200      	movs	r2, #0
     7de:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:157
			state = HALF_LOW_CLK;
     7e0:	4b02      	ldr	r3, [pc, #8]	; (7ec <ClockInterruption_OnInterrupt+0xfc>)
     7e2:	2203      	movs	r2, #3
     7e4:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:160
		}

		break;
     7e6:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:163
	}
	}
}
     7e8:	46bd      	mov	sp, r7
     7ea:	bd80      	pop	{r7, pc}
     7ec:	1ffff168 	.word	0x1ffff168
     7f0:	00001d78 	.word	0x00001d78
     7f4:	1ffff160 	.word	0x1ffff160
     7f8:	1ffff0a8 	.word	0x1ffff0a8
     7fc:	1ffff16c 	.word	0x1ffff16c
     800:	1ffff164 	.word	0x1ffff164

00000804 <ImageConverter_OnEnd>:
ImageConverter_OnEnd():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:180
 **     Parameters  : None
 **     Returns     : Nothing
 ** ===================================================================
 */
void ImageConverter_OnEnd(void)
{
     804:	b580      	push	{r7, lr}
     806:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:182

	ImageConverter_GetValue(&pixelArray[0][clockCounter]);
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <ImageConverter_OnEnd+0x18>)
     80a:	681a      	ldr	r2, [r3, #0]
     80c:	4b04      	ldr	r3, [pc, #16]	; (820 <ImageConverter_OnEnd+0x1c>)
     80e:	18d3      	adds	r3, r2, r3
     810:	1c18      	adds	r0, r3, #0
     812:	f000 fd41 	bl	1298 <ImageConverter_GetValue>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:183
}
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	1ffff160 	.word	0x1ffff160
     820:	1ffff174 	.word	0x1ffff174

00000824 <ImageConverter_OnCalibrationEnd>:
ImageConverter_OnCalibrationEnd():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:200
 **     Parameters  : None
 **     Returns     : Nothing
 ** ===================================================================
 */
void ImageConverter_OnCalibrationEnd(void)
{
     824:	b580      	push	{r7, lr}
     826:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:202
	/* Write your code here ... */
}
     828:	46bd      	mov	sp, r7
     82a:	bd80      	pop	{r7, pc}

0000082c <SerialCom_OnBlockReceived>:
SerialCom_OnBlockReceived():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:221
 **                           RTOS specific data. This pointer is passed
 **                           as the parameter of Init method.
 */
/* ===================================================================*/
void SerialCom_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
     82c:	b580      	push	{r7, lr}
     82e:	b082      	sub	sp, #8
     830:	af00      	add	r7, sp, #0
     832:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:223
	/* Write your code here ... */
}
     834:	46bd      	mov	sp, r7
     836:	b002      	add	sp, #8
     838:	bd80      	pop	{r7, pc}
     83a:	46c0      	nop			; (mov r8, r8)

0000083c <SerialCom_OnBlockSent>:
SerialCom_OnBlockSent():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:242
 **                           RTOS specific data. This pointer is passed
 **                           as the parameter of Init method.
 */
/* ===================================================================*/
void SerialCom_OnBlockSent(LDD_TUserData *UserDataPtr)
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:243
	Serial_Device *ptr = (Serial_Device*)UserDataPtr;
     844:	687b      	ldr	r3, [r7, #4]
     846:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:245

	ptr->isSent = TRUE; /* set flag so sender knows we have finished */
     848:	68fb      	ldr	r3, [r7, #12]
     84a:	2201      	movs	r2, #1
     84c:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/Events.c:247

}
     84e:	46bd      	mov	sp, r7
     850:	b004      	add	sp, #16
     852:	bd80      	pop	{r7, pc}

00000854 <init_Serial>:
init_Serial():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:13
#include "SerialCommunication.h"

static Serial_Device deviceData;

static void init_Serial()
{
     854:	b580      	push	{r7, lr}
     856:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:14
	deviceData.handle = SerialCom_Init(&deviceData); /* Initialization of serial component */
     858:	4b05      	ldr	r3, [pc, #20]	; (870 <init_Serial+0x1c>)
     85a:	1c18      	adds	r0, r3, #0
     85c:	f000 fe52 	bl	1504 <SerialCom_Init>
     860:	1c02      	adds	r2, r0, #0
     862:	4b03      	ldr	r3, [pc, #12]	; (870 <init_Serial+0x1c>)
     864:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:15
	deviceData.isSent = FALSE;
     866:	4b02      	ldr	r3, [pc, #8]	; (870 <init_Serial+0x1c>)
     868:	2200      	movs	r2, #0
     86a:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:16
}
     86c:	46bd      	mov	sp, r7
     86e:	bd80      	pop	{r7, pc}
     870:	1ffff07c 	.word	0x1ffff07c

00000874 <sendChar>:
sendChar():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:19

static int sendChar(unsigned char ch)
{
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	1c02      	adds	r2, r0, #0
     87c:	1dfb      	adds	r3, r7, #7
     87e:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:20
	deviceData.isSent = FALSE;
     880:	4b0c      	ldr	r3, [pc, #48]	; (8b4 <sendChar+0x40>)
     882:	2200      	movs	r2, #0
     884:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:21
	while(SerialCom_SendBlock(deviceData.handle, (LDD_TData*)&ch, 1)!= ERR_OK) {} /* Send char */
     886:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:21 (discriminator 1)
     888:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <sendChar+0x40>)
     88a:	681a      	ldr	r2, [r3, #0]
     88c:	1dfb      	adds	r3, r7, #7
     88e:	1c10      	adds	r0, r2, #0
     890:	1c19      	adds	r1, r3, #0
     892:	2201      	movs	r2, #1
     894:	f000 ff0e 	bl	16b4 <SerialCom_SendBlock>
     898:	1c03      	adds	r3, r0, #0
     89a:	2b00      	cmp	r3, #0
     89c:	d1f4      	bne.n	888 <sendChar+0x14>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:22
	while(!deviceData.isSent) {} /* wait until we get the green flag from the TX interrupt */
     89e:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:22 (discriminator 1)
     8a0:	4b04      	ldr	r3, [pc, #16]	; (8b4 <sendChar+0x40>)
     8a2:	791b      	ldrb	r3, [r3, #4]
     8a4:	b2db      	uxtb	r3, r3
     8a6:	2b00      	cmp	r3, #0
     8a8:	d0fa      	beq.n	8a0 <sendChar+0x2c>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:23
}
     8aa:	1c18      	adds	r0, r3, #0
     8ac:	46bd      	mov	sp, r7
     8ae:	b002      	add	sp, #8
     8b0:	bd80      	pop	{r7, pc}
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	1ffff07c 	.word	0x1ffff07c

000008b8 <itoa_8_bit>:
itoa_8_bit():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:26

void itoa_8_bit(uint8_t sample)
{
     8b8:	b580      	push	{r7, lr}
     8ba:	b088      	sub	sp, #32
     8bc:	af00      	add	r7, sp, #0
     8be:	1c02      	adds	r2, r0, #0
     8c0:	1dfb      	adds	r3, r7, #7
     8c2:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:36
	{
		sendChar('E');
		return;
	}

	R1 = (unsigned char) (sample % 10) + '0';
     8c4:	1dfb      	adds	r3, r7, #7
     8c6:	781b      	ldrb	r3, [r3, #0]
     8c8:	1c18      	adds	r0, r3, #0
     8ca:	210a      	movs	r1, #10
     8cc:	f7ff fe50 	bl	570 <__aeabi_uidivmod>
     8d0:	1c0b      	adds	r3, r1, #0
     8d2:	b2da      	uxtb	r2, r3
     8d4:	1c3b      	adds	r3, r7, #0
     8d6:	331f      	adds	r3, #31
     8d8:	3230      	adds	r2, #48	; 0x30
     8da:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:37
	Q1 = sample / 10;
     8dc:	1dfb      	adds	r3, r7, #7
     8de:	781b      	ldrb	r3, [r3, #0]
     8e0:	1c18      	adds	r0, r3, #0
     8e2:	210a      	movs	r1, #10
     8e4:	f7ff fe00 	bl	4e8 <__aeabi_uidiv>
     8e8:	1c03      	adds	r3, r0, #0
     8ea:	b2db      	uxtb	r3, r3
     8ec:	61bb      	str	r3, [r7, #24]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:39

	R2 = (unsigned char) (Q1 % 10) + '0';
     8ee:	69bb      	ldr	r3, [r7, #24]
     8f0:	1c18      	adds	r0, r3, #0
     8f2:	210a      	movs	r1, #10
     8f4:	f7ff fe9c 	bl	630 <__aeabi_idivmod>
     8f8:	1c0b      	adds	r3, r1, #0
     8fa:	b2da      	uxtb	r2, r3
     8fc:	1c3b      	adds	r3, r7, #0
     8fe:	3317      	adds	r3, #23
     900:	3230      	adds	r2, #48	; 0x30
     902:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:40
	Q2 = Q1 / 10;
     904:	69bb      	ldr	r3, [r7, #24]
     906:	1c18      	adds	r0, r3, #0
     908:	210a      	movs	r1, #10
     90a:	f7ff fe3b 	bl	584 <__aeabi_idiv>
     90e:	1c03      	adds	r3, r0, #0
     910:	613b      	str	r3, [r7, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:42

	R3 = (unsigned char) (Q2 % 10) + '0';
     912:	693b      	ldr	r3, [r7, #16]
     914:	1c18      	adds	r0, r3, #0
     916:	210a      	movs	r1, #10
     918:	f7ff fe8a 	bl	630 <__aeabi_idivmod>
     91c:	1c0b      	adds	r3, r1, #0
     91e:	b2da      	uxtb	r2, r3
     920:	1c3b      	adds	r3, r7, #0
     922:	330f      	adds	r3, #15
     924:	3230      	adds	r2, #48	; 0x30
     926:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:44

	sendChar(R3);
     928:	1c3b      	adds	r3, r7, #0
     92a:	330f      	adds	r3, #15
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	1c18      	adds	r0, r3, #0
     930:	f7ff ffa0 	bl	874 <sendChar>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:45
	sendChar(R2);
     934:	1c3b      	adds	r3, r7, #0
     936:	3317      	adds	r3, #23
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	1c18      	adds	r0, r3, #0
     93c:	f7ff ff9a 	bl	874 <sendChar>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:46
	sendChar(R1);
     940:	1c3b      	adds	r3, r7, #0
     942:	331f      	adds	r3, #31
     944:	781b      	ldrb	r3, [r3, #0]
     946:	1c18      	adds	r0, r3, #0
     948:	f7ff ff94 	bl	874 <sendChar>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:47
}
     94c:	46bd      	mov	sp, r7
     94e:	b008      	add	sp, #32
     950:	bd80      	pop	{r7, pc}
     952:	46c0      	nop			; (mov r8, r8)

00000954 <sendArrayOfPixels>:
sendArrayOfPixels():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:50

void sendArrayOfPixels(uint8_t array[])
{
     954:	b580      	push	{r7, lr}
     956:	b084      	sub	sp, #16
     958:	af00      	add	r7, sp, #0
     95a:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:51
	init_Serial();
     95c:	f7ff ff7a 	bl	854 <init_Serial>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:53

	for (int pixel = 0; pixel < 128; pixel++)
     960:	2300      	movs	r3, #0
     962:	60fb      	str	r3, [r7, #12]
     964:	e00c      	b.n	980 <sendArrayOfPixels+0x2c>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:55 (discriminator 2)
	{
		itoa_8_bit(array[pixel]);
     966:	68fb      	ldr	r3, [r7, #12]
     968:	687a      	ldr	r2, [r7, #4]
     96a:	18d3      	adds	r3, r2, r3
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	1c18      	adds	r0, r3, #0
     970:	f7ff ffa2 	bl	8b8 <itoa_8_bit>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:56 (discriminator 2)
		sendChar(' ');
     974:	2020      	movs	r0, #32
     976:	f7ff ff7d 	bl	874 <sendChar>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:53 (discriminator 2)

void sendArrayOfPixels(uint8_t array[])
{
	init_Serial();

	for (int pixel = 0; pixel < 128; pixel++)
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	3301      	adds	r3, #1
     97e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:53 (discriminator 1)
     980:	68fb      	ldr	r3, [r7, #12]
     982:	2b7f      	cmp	r3, #127	; 0x7f
     984:	ddef      	ble.n	966 <sendArrayOfPixels+0x12>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:59
	{
		itoa_8_bit(array[pixel]);
		sendChar(' ');
	}

	sendChar('\n');
     986:	200a      	movs	r0, #10
     988:	f7ff ff74 	bl	874 <sendChar>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:60
	sendChar('\r');
     98c:	200d      	movs	r0, #13
     98e:	f7ff ff71 	bl	874 <sendChar>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:62

	serialFinished = TRUE;
     992:	4b03      	ldr	r3, [pc, #12]	; (9a0 <sendArrayOfPixels+0x4c>)
     994:	2201      	movs	r2, #1
     996:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/SerialCommunication.c:63
}
     998:	46bd      	mov	sp, r7
     99a:	b004      	add	sp, #16
     99c:	bd80      	pop	{r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	1ffff171 	.word	0x1ffff171

000009a4 <main>:
main():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/main.c:76


/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable_Motors MISRA rule (6.3) checking. */
{
     9a4:	b580      	push	{r7, lr}
     9a6:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/main.c:80
	/* Write your local variable definition here */

	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
     9a8:	f000 fbac 	bl	1104 <PE_low_level_init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/main.c:93
//		Servomotor_SetDutyUS(MIN_DIR);
//		for (int i = 0; i < 10000000; i++);
//	}
//
//	Enable_Motors_SetVal();
	cameraStartReading(TRUE);
     9ac:	2001      	movs	r0, #1
     9ae:	f7ff fe4b 	bl	648 <cameraStartReading>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Sources/main.c:102 (discriminator 1)
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
     9b2:	e7fe      	b.n	9b2 <main+0xe>

000009b4 <__copy_rom_section>:
__copy_rom_section():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:44

/*
 *	Routine to copy a single section from ROM to RAM ...
 */
void __copy_rom_section(unsigned long dst, unsigned long src, unsigned long size)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	b08a      	sub	sp, #40	; 0x28
     9b8:	af00      	add	r7, sp, #0
     9ba:	60f8      	str	r0, [r7, #12]
     9bc:	60b9      	str	r1, [r7, #8]
     9be:	607a      	str	r2, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:45
	unsigned long len = size;
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	627b      	str	r3, [r7, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:47

	const unsigned int size_int = sizeof(int);
     9c4:	2304      	movs	r3, #4
     9c6:	623b      	str	r3, [r7, #32]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:48
	const unsigned int mask_int = sizeof(int)-1;
     9c8:	2303      	movs	r3, #3
     9ca:	61fb      	str	r3, [r7, #28]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:50

	const unsigned int size_short = sizeof(short);
     9cc:	2302      	movs	r3, #2
     9ce:	61bb      	str	r3, [r7, #24]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:51
	const unsigned int mask_short = sizeof(short)-1;
     9d0:	2301      	movs	r3, #1
     9d2:	617b      	str	r3, [r7, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:53

	const unsigned int size_char = sizeof(char);
     9d4:	2301      	movs	r3, #1
     9d6:	613b      	str	r3, [r7, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:55

	if( dst == src || size == 0)
     9d8:	68fa      	ldr	r2, [r7, #12]
     9da:	68bb      	ldr	r3, [r7, #8]
     9dc:	429a      	cmp	r2, r3
     9de:	d002      	beq.n	9e6 <__copy_rom_section+0x32>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:55 (discriminator 1)
     9e0:	687b      	ldr	r3, [r7, #4]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d100      	bne.n	9e8 <__copy_rom_section+0x34>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:57
	{
		return;
     9e6:	e04d      	b.n	a84 <__copy_rom_section+0xd0>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:61
	}


	while( len > 0)
     9e8:	e049      	b.n	a7e <__copy_rom_section+0xca>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:64
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
     9ea:	68bb      	ldr	r3, [r7, #8]
     9ec:	69fa      	ldr	r2, [r7, #28]
     9ee:	4013      	ands	r3, r2
     9f0:	d118      	bne.n	a24 <__copy_rom_section+0x70>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:64 (discriminator 1)
     9f2:	68fb      	ldr	r3, [r7, #12]
     9f4:	69fa      	ldr	r2, [r7, #28]
     9f6:	4013      	ands	r3, r2
     9f8:	d114      	bne.n	a24 <__copy_rom_section+0x70>
     9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     9fc:	6a3b      	ldr	r3, [r7, #32]
     9fe:	429a      	cmp	r2, r3
     a00:	d310      	bcc.n	a24 <__copy_rom_section+0x70>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:66
		{
			*((int *)dst)  = *((int*)src);
     a02:	68fb      	ldr	r3, [r7, #12]
     a04:	68ba      	ldr	r2, [r7, #8]
     a06:	6812      	ldr	r2, [r2, #0]
     a08:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:67
			dst += size_int;
     a0a:	68fa      	ldr	r2, [r7, #12]
     a0c:	6a3b      	ldr	r3, [r7, #32]
     a0e:	18d3      	adds	r3, r2, r3
     a10:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:68
			src += size_int;
     a12:	68ba      	ldr	r2, [r7, #8]
     a14:	6a3b      	ldr	r3, [r7, #32]
     a16:	18d3      	adds	r3, r2, r3
     a18:	60bb      	str	r3, [r7, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:69
			len -= size_int;
     a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a1c:	6a3b      	ldr	r3, [r7, #32]
     a1e:	1ad3      	subs	r3, r2, r3
     a20:	627b      	str	r3, [r7, #36]	; 0x24
     a22:	e02c      	b.n	a7e <__copy_rom_section+0xca>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:71
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
     a24:	68bb      	ldr	r3, [r7, #8]
     a26:	697a      	ldr	r2, [r7, #20]
     a28:	4013      	ands	r3, r2
     a2a:	d118      	bne.n	a5e <__copy_rom_section+0xaa>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:71 (discriminator 1)
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	697a      	ldr	r2, [r7, #20]
     a30:	4013      	ands	r3, r2
     a32:	d114      	bne.n	a5e <__copy_rom_section+0xaa>
     a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a36:	69bb      	ldr	r3, [r7, #24]
     a38:	429a      	cmp	r2, r3
     a3a:	d310      	bcc.n	a5e <__copy_rom_section+0xaa>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:73
		{
			*((short *)dst)  = *((short*)src);
     a3c:	68fb      	ldr	r3, [r7, #12]
     a3e:	68ba      	ldr	r2, [r7, #8]
     a40:	8812      	ldrh	r2, [r2, #0]
     a42:	801a      	strh	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:74
			dst += size_short;
     a44:	68fa      	ldr	r2, [r7, #12]
     a46:	69bb      	ldr	r3, [r7, #24]
     a48:	18d3      	adds	r3, r2, r3
     a4a:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:75
			src += size_short;
     a4c:	68ba      	ldr	r2, [r7, #8]
     a4e:	69bb      	ldr	r3, [r7, #24]
     a50:	18d3      	adds	r3, r2, r3
     a52:	60bb      	str	r3, [r7, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:76
			len -= size_short;
     a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a56:	69bb      	ldr	r3, [r7, #24]
     a58:	1ad3      	subs	r3, r2, r3
     a5a:	627b      	str	r3, [r7, #36]	; 0x24
     a5c:	e00f      	b.n	a7e <__copy_rom_section+0xca>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:80
		}
		else
		{
			*((char *)dst)  = *((char*)src);
     a5e:	68fb      	ldr	r3, [r7, #12]
     a60:	68ba      	ldr	r2, [r7, #8]
     a62:	7812      	ldrb	r2, [r2, #0]
     a64:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:81
			dst += size_char;
     a66:	68fa      	ldr	r2, [r7, #12]
     a68:	693b      	ldr	r3, [r7, #16]
     a6a:	18d3      	adds	r3, r2, r3
     a6c:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:82
			src += size_char;
     a6e:	68ba      	ldr	r2, [r7, #8]
     a70:	693b      	ldr	r3, [r7, #16]
     a72:	18d3      	adds	r3, r2, r3
     a74:	60bb      	str	r3, [r7, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:83
			len -= size_char;
     a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a78:	693b      	ldr	r3, [r7, #16]
     a7a:	1ad3      	subs	r3, r2, r3
     a7c:	627b      	str	r3, [r7, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:61 (discriminator 1)
	{
		return;
	}


	while( len > 0)
     a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a80:	2b00      	cmp	r3, #0
     a82:	d1b2      	bne.n	9ea <__copy_rom_section+0x36>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:86
			dst += size_char;
			src += size_char;
			len -= size_char;
		}
	}
}
     a84:	46bd      	mov	sp, r7
     a86:	b00a      	add	sp, #40	; 0x28
     a88:	bd80      	pop	{r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)

00000a8c <__copy_rom_sections_to_ram>:
__copy_rom_sections_to_ram():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:98
 *  It is a table of RomInfo
 *	structures.  The final entry in the table has all-zero
 *	fields.
 */
void __copy_rom_sections_to_ram(void)
{
     a8c:	b590      	push	{r4, r7, lr}
     a8e:	b083      	sub	sp, #12
     a90:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:102

	int				index;

	if (__S_romp == 0L) return;
     a92:	4b23      	ldr	r3, [pc, #140]	; (b20 <__copy_rom_sections_to_ram+0x94>)
     a94:	2b00      	cmp	r3, #0
     a96:	d100      	bne.n	a9a <__copy_rom_sections_to_ram+0xe>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:102 (discriminator 1)
     a98:	e03e      	b.n	b18 <__copy_rom_sections_to_ram+0x8c>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:107

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
     a9a:	2300      	movs	r3, #0
     a9c:	607b      	str	r3, [r7, #4]
     a9e:	e01d      	b.n	adc <__copy_rom_sections_to_ram+0x50>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:113
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
     aa0:	491f      	ldr	r1, [pc, #124]	; (b20 <__copy_rom_sections_to_ram+0x94>)
     aa2:	687a      	ldr	r2, [r7, #4]
     aa4:	1c13      	adds	r3, r2, #0
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	189b      	adds	r3, r3, r2
     aaa:	009b      	lsls	r3, r3, #2
     aac:	18cb      	adds	r3, r1, r3
     aae:	6858      	ldr	r0, [r3, #4]
     ab0:	491b      	ldr	r1, [pc, #108]	; (b20 <__copy_rom_sections_to_ram+0x94>)
     ab2:	687a      	ldr	r2, [r7, #4]
     ab4:	1c13      	adds	r3, r2, #0
     ab6:	005b      	lsls	r3, r3, #1
     ab8:	189b      	adds	r3, r3, r2
     aba:	009b      	lsls	r3, r3, #2
     abc:	5859      	ldr	r1, [r3, r1]
     abe:	4c18      	ldr	r4, [pc, #96]	; (b20 <__copy_rom_sections_to_ram+0x94>)
     ac0:	687a      	ldr	r2, [r7, #4]
     ac2:	1c13      	adds	r3, r2, #0
     ac4:	005b      	lsls	r3, r3, #1
     ac6:	189b      	adds	r3, r3, r2
     ac8:	009b      	lsls	r3, r3, #2
     aca:	18e3      	adds	r3, r4, r3
     acc:	3308      	adds	r3, #8
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	1c1a      	adds	r2, r3, #0
     ad2:	f7ff ff6f 	bl	9b4 <__copy_rom_section>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:111
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	3301      	adds	r3, #1
     ada:	607b      	str	r3, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:108 (discriminator 1)

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
     adc:	4910      	ldr	r1, [pc, #64]	; (b20 <__copy_rom_sections_to_ram+0x94>)
     ade:	687a      	ldr	r2, [r7, #4]
     ae0:	1c13      	adds	r3, r2, #0
     ae2:	005b      	lsls	r3, r3, #1
     ae4:	189b      	adds	r3, r3, r2
     ae6:	009b      	lsls	r3, r3, #2
     ae8:	585b      	ldr	r3, [r3, r1]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:107 (discriminator 1)
	if (__S_romp == 0L) return;

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
     aea:	2b00      	cmp	r3, #0
     aec:	d1d8      	bne.n	aa0 <__copy_rom_sections_to_ram+0x14>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:109
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
     aee:	490c      	ldr	r1, [pc, #48]	; (b20 <__copy_rom_sections_to_ram+0x94>)
     af0:	687a      	ldr	r2, [r7, #4]
     af2:	1c13      	adds	r3, r2, #0
     af4:	005b      	lsls	r3, r3, #1
     af6:	189b      	adds	r3, r3, r2
     af8:	009b      	lsls	r3, r3, #2
     afa:	18cb      	adds	r3, r1, r3
     afc:	685b      	ldr	r3, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:108

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
     afe:	2b00      	cmp	r3, #0
     b00:	d1ce      	bne.n	aa0 <__copy_rom_sections_to_ram+0x14>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:110
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
     b02:	4907      	ldr	r1, [pc, #28]	; (b20 <__copy_rom_sections_to_ram+0x94>)
     b04:	687a      	ldr	r2, [r7, #4]
     b06:	1c13      	adds	r3, r2, #0
     b08:	005b      	lsls	r3, r3, #1
     b0a:	189b      	adds	r3, r3, r2
     b0c:	009b      	lsls	r3, r3, #2
     b0e:	18cb      	adds	r3, r1, r3
     b10:	3308      	adds	r3, #8
     b12:	681b      	ldr	r3, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:109
	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
     b14:	2b00      	cmp	r3, #0
     b16:	d1c3      	bne.n	aa0 <__copy_rom_sections_to_ram+0x14>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:118
		__copy_rom_section( __S_romp[index].Target,
							__S_romp[index].Source,
							__S_romp[index].Size );

	}
}
     b18:	46bd      	mov	sp, r7
     b1a:	b003      	add	sp, #12
     b1c:	bd90      	pop	{r4, r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00001e1c 	.word	0x00001e1c

00000b24 <__init_registers>:
__init_registers():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:168
  }
}
#endif

void __attribute__ ((weak)) __init_registers(void)
{
     b24:	b580      	push	{r7, lr}
     b26:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:174
  #if defined(SCB_CPACR)
  /* Initialize FPU */
  SCB_CPACR |= SCB_CPACR_CP10(3U) | SCB_CPACR_CP11(3U); 
  #endif

}
     b28:	46bd      	mov	sp, r7
     b2a:	bd80      	pop	{r7, pc}

00000b2c <__init_user>:
__init_user():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:182
{

}

void __attribute__ ((weak)) __init_user(void)
{
     b2c:	b580      	push	{r7, lr}
     b2e:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:184

}
     b30:	46bd      	mov	sp, r7
     b32:	bd80      	pop	{r7, pc}

00000b34 <__thumb_startup>:
__thumb_startup():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:197
	__thumb_startup();
}

__attribute__((naked)) void __thumb_startup(void)
{
int addr = (int)__SP_INIT;
     b34:	4c0a      	ldr	r4, [pc, #40]	; (b60 <skip_sp+0x18>)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:202

    /* setup the stack before we attempt anything else
       skip stack setup if __SP_INIT is 0
       assume sp is already setup. */
    __asm (
     b36:	1c20      	adds	r0, r4, #0
     b38:	2800      	cmp	r0, #0
     b3a:	d005      	beq.n	b48 <skip_sp>
     b3c:	4685      	mov	sp, r0
     b3e:	b081      	sub	sp, #4
     b40:	2000      	movs	r0, #0
     b42:	43c0      	mvns	r0, r0
     b44:	9000      	str	r0, [sp, #0]
     b46:	b001      	add	sp, #4

00000b48 <skip_sp>:
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:216
    "add  sp,#4\n\t"
    "skip_sp:\n\t"
    ::"r"(addr));

    /* Setup registers */
    __init_registers();
     b48:	f7ff ffec 	bl	b24 <__init_registers>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:219
    
    /* setup hardware */
    __init_hardware();
     b4c:	f000 fa52 	bl	ff4 <__init_hardware>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:222
    
    /* SUPPORT_ROM_TO_RAM */
    __copy_rom_sections_to_ram();
     b50:	f7ff ff9c 	bl	a8c <__copy_rom_sections_to_ram>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:225
    
    /* initializations before main, user specific */
    __init_user();
     b54:	f7ff ffea 	bl	b2c <__init_user>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:228

#ifndef __ATOLLIC__
    _start();
     b58:	f7ff fc8a 	bl	470 <_mainCRTStartup>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Project_Settings/Startup_Code/startup.c:238 (discriminator 1)
    __libc_init_array();
    main();
#endif

    /*	should never get here */
    while (1);
     b5c:	e7fe      	b.n	b5c <skip_sp+0x14>
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	20003000 	.word	0x20003000

00000b64 <AdcLdd1_Init>:
AdcLdd1_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:176
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* AdcLdd1_Init(LDD_TUserData *UserDataPtr)
{
     b64:	b580      	push	{r7, lr}
     b66:	b084      	sub	sp, #16
     b68:	af00      	add	r7, sp, #0
     b6a:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:181
  /* Allocate LDD device structure */
  AdcLdd1_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     b6c:	4b25      	ldr	r3, [pc, #148]	; (c04 <AdcLdd1_Init+0xa0>)
     b6e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:182
  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	687a      	ldr	r2, [r7, #4]
     b74:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:185
  /* Interrupt vector(s) allocation */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_ADC0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
     b76:	4b24      	ldr	r3, [pc, #144]	; (c08 <AdcLdd1_Init+0xa4>)
     b78:	68fa      	ldr	r2, [r7, #12]
     b7a:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:186
  DeviceDataPrv->SampleCount = 0U;     /* Initializing SampleCount for right access of some methods to SC1n registers before first conversion is done */
     b7c:	68fb      	ldr	r3, [r7, #12]
     b7e:	2200      	movs	r2, #0
     b80:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:187
  DeviceDataPrv->CompleteStatus = FALSE; /* Clear measurement complete status flag */
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	2200      	movs	r2, #0
     b86:	709a      	strb	r2, [r3, #2]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:189
  /* SIM_SCGC6: ADC0=1 */
  SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;
     b88:	4a20      	ldr	r2, [pc, #128]	; (c0c <AdcLdd1_Init+0xa8>)
     b8a:	4920      	ldr	r1, [pc, #128]	; (c0c <AdcLdd1_Init+0xa8>)
     b8c:	4b20      	ldr	r3, [pc, #128]	; (c10 <AdcLdd1_Init+0xac>)
     b8e:	58cb      	ldr	r3, [r1, r3]
     b90:	2180      	movs	r1, #128	; 0x80
     b92:	0509      	lsls	r1, r1, #20
     b94:	4319      	orrs	r1, r3
     b96:	4b1e      	ldr	r3, [pc, #120]	; (c10 <AdcLdd1_Init+0xac>)
     b98:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:192
  /* Interrupt vector(s) priority setting */
  /* NVIC_IPR3: PRI_15=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
     b9a:	4a1e      	ldr	r2, [pc, #120]	; (c14 <AdcLdd1_Init+0xb0>)
     b9c:	491d      	ldr	r1, [pc, #116]	; (c14 <AdcLdd1_Init+0xb0>)
     b9e:	23c3      	movs	r3, #195	; 0xc3
     ba0:	009b      	lsls	r3, r3, #2
     ba2:	58cb      	ldr	r3, [r1, r3]
     ba4:	009b      	lsls	r3, r3, #2
     ba6:	0899      	lsrs	r1, r3, #2
     ba8:	23c3      	movs	r3, #195	; 0xc3
     baa:	009b      	lsls	r3, r3, #2
     bac:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:198
               NVIC_IP_PRI_15(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_15(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x8000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x8000);
     bae:	4b19      	ldr	r3, [pc, #100]	; (c14 <AdcLdd1_Init+0xb0>)
     bb0:	4a18      	ldr	r2, [pc, #96]	; (c14 <AdcLdd1_Init+0xb0>)
     bb2:	6812      	ldr	r2, [r2, #0]
     bb4:	2180      	movs	r1, #128	; 0x80
     bb6:	0209      	lsls	r1, r1, #8
     bb8:	430a      	orrs	r2, r1
     bba:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:200
  /* PORTD_PCR5: ISF=0,MUX=0 */
  PORTD_PCR5 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
     bbc:	4b16      	ldr	r3, [pc, #88]	; (c18 <AdcLdd1_Init+0xb4>)
     bbe:	4a16      	ldr	r2, [pc, #88]	; (c18 <AdcLdd1_Init+0xb4>)
     bc0:	6951      	ldr	r1, [r2, #20]
     bc2:	4a16      	ldr	r2, [pc, #88]	; (c1c <AdcLdd1_Init+0xb8>)
     bc4:	400a      	ands	r2, r1
     bc6:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:202
  /* ADC0_CFG2: MUXSEL=1 */
  ADC0_CFG2 |= ADC_CFG2_MUXSEL_MASK;
     bc8:	4b15      	ldr	r3, [pc, #84]	; (c20 <AdcLdd1_Init+0xbc>)
     bca:	4a15      	ldr	r2, [pc, #84]	; (c20 <AdcLdd1_Init+0xbc>)
     bcc:	68d2      	ldr	r2, [r2, #12]
     bce:	2110      	movs	r1, #16
     bd0:	430a      	orrs	r2, r1
     bd2:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:204
  /* ADC0_CFG1: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,ADLPC=0,ADIV=3,ADLSMP=0,MODE=0,ADICLK=1 */
  ADC0_CFG1 = ADC_CFG1_ADIV(0x03) |
     bd4:	4b12      	ldr	r3, [pc, #72]	; (c20 <AdcLdd1_Init+0xbc>)
     bd6:	2261      	movs	r2, #97	; 0x61
     bd8:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:209
              ADC_CFG1_MODE(0x00) |
              ADC_CFG1_ADICLK(0x01);

  /* ADC0_CFG2: ADACKEN=0,ADHSC=0,ADLSTS=0 */
  ADC0_CFG2 &= (uint32_t)~(uint32_t)(
     bda:	4b11      	ldr	r3, [pc, #68]	; (c20 <AdcLdd1_Init+0xbc>)
     bdc:	4a10      	ldr	r2, [pc, #64]	; (c20 <AdcLdd1_Init+0xbc>)
     bde:	68d2      	ldr	r2, [r2, #12]
     be0:	210f      	movs	r1, #15
     be2:	438a      	bics	r2, r1
     be4:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:215
                ADC_CFG2_ADACKEN_MASK |
                ADC_CFG2_ADHSC_MASK |
                ADC_CFG2_ADLSTS(0x03)
               );
  /* ADC0_SC2: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,ADACT=0,ADTRG=0,ACFE=0,ACFGT=0,ACREN=0,DMAEN=0,REFSEL=0 */
  ADC0_SC2 = ADC_SC2_REFSEL(0x00);
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <AdcLdd1_Init+0xbc>)
     be8:	2200      	movs	r2, #0
     bea:	621a      	str	r2, [r3, #32]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:217
  /* ADC0_SC3: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CAL=0,CALF=1,??=0,??=0,ADCO=0,AVGE=0,AVGS=0 */
  ADC0_SC3 = (ADC_SC3_CALF_MASK | ADC_SC3_AVGS(0x00));
     bec:	4b0c      	ldr	r3, [pc, #48]	; (c20 <AdcLdd1_Init+0xbc>)
     bee:	2240      	movs	r2, #64	; 0x40
     bf0:	625a      	str	r2, [r3, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:219
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_AdcLdd1_ID,DeviceDataPrv);
     bf2:	4b0c      	ldr	r3, [pc, #48]	; (c24 <AdcLdd1_Init+0xc0>)
     bf4:	68fa      	ldr	r2, [r7, #12]
     bf6:	611a      	str	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:220
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
     bf8:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:221
}
     bfa:	1c18      	adds	r0, r3, #0
     bfc:	46bd      	mov	sp, r7
     bfe:	b004      	add	sp, #16
     c00:	bd80      	pop	{r7, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	1ffff084 	.word	0x1ffff084
     c08:	1ffff08c 	.word	0x1ffff08c
     c0c:	40047000 	.word	0x40047000
     c10:	0000103c 	.word	0x0000103c
     c14:	e000e100 	.word	0xe000e100
     c18:	4004c000 	.word	0x4004c000
     c1c:	fefff8ff 	.word	0xfefff8ff
     c20:	4003b000 	.word	0x4003b000
     c24:	1ffff0a8 	.word	0x1ffff0a8

00000c28 <AdcLdd1_StartSingleMeasurement>:
AdcLdd1_StartSingleMeasurement():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:262
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - A measurement is in progress 
*/
/* ===================================================================*/
LDD_TError AdcLdd1_StartSingleMeasurement(LDD_TDeviceData *DeviceDataPtr)
{
     c28:	b580      	push	{r7, lr}
     c2a:	b082      	sub	sp, #8
     c2c:	af00      	add	r7, sp, #0
     c2e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:264
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (ADC_PDD_GetConversionActiveFlag(ADC0_BASE_PTR) != 0U) { /* Last measurement still pending? */
     c30:	4b0d      	ldr	r3, [pc, #52]	; (c68 <AdcLdd1_StartSingleMeasurement+0x40>)
     c32:	6a1a      	ldr	r2, [r3, #32]
     c34:	2380      	movs	r3, #128	; 0x80
     c36:	4013      	ands	r3, r2
     c38:	d001      	beq.n	c3e <AdcLdd1_StartSingleMeasurement+0x16>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:265
    return ERR_BUSY;                   /* Yes, return ERR_BUSY */
     c3a:	2308      	movs	r3, #8
     c3c:	e010      	b.n	c60 <AdcLdd1_StartSingleMeasurement+0x38>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:267
  }
  ADC_PDD_SetContinuousMode(ADC0_BASE_PTR, ADC_PDD_ONE_CONVERSION); /* Set one conversion mode */
     c3e:	4b0a      	ldr	r3, [pc, #40]	; (c68 <AdcLdd1_StartSingleMeasurement+0x40>)
     c40:	4a09      	ldr	r2, [pc, #36]	; (c68 <AdcLdd1_StartSingleMeasurement+0x40>)
     c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
     c44:	2148      	movs	r1, #72	; 0x48
     c46:	438a      	bics	r2, r1
     c48:	625a      	str	r2, [r3, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:268
  ADC_PDD_SetConversionTriggerType(ADC0_BASE_PTR, ADC_PDD_SW_TRIGGER); /* Select SW triggering */
     c4a:	4b07      	ldr	r3, [pc, #28]	; (c68 <AdcLdd1_StartSingleMeasurement+0x40>)
     c4c:	4a06      	ldr	r2, [pc, #24]	; (c68 <AdcLdd1_StartSingleMeasurement+0x40>)
     c4e:	6a12      	ldr	r2, [r2, #32]
     c50:	2140      	movs	r1, #64	; 0x40
     c52:	438a      	bics	r2, r1
     c54:	621a      	str	r2, [r3, #32]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:269
  ADC_PDD_WriteStatusControl1Reg(ADC0_BASE_PTR, 0U, ((AdcLdd1_TDeviceDataPtr)DeviceDataPtr)->FirstSample); /* Set sample 0 and start conversion */
     c56:	4b04      	ldr	r3, [pc, #16]	; (c68 <AdcLdd1_StartSingleMeasurement+0x40>)
     c58:	687a      	ldr	r2, [r7, #4]
     c5a:	7852      	ldrb	r2, [r2, #1]
     c5c:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:270
  return ERR_OK;                       /* OK */
     c5e:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:271
}
     c60:	1c18      	adds	r0, r3, #0
     c62:	46bd      	mov	sp, r7
     c64:	b002      	add	sp, #8
     c66:	bd80      	pop	{r7, pc}
     c68:	4003b000 	.word	0x4003b000

00000c6c <AdcLdd1_CreateSampleGroup>:
AdcLdd1_CreateSampleGroup():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:345
**                           variable value is out of range
**                           ERR_BUSY - Measurement is in progress 
*/
/* ===================================================================*/
LDD_TError AdcLdd1_CreateSampleGroup(LDD_TDeviceData *DeviceDataPtr, LDD_ADC_TSample *SampleGroupPtr, uint8_t SampleCount)
{
     c6c:	b580      	push	{r7, lr}
     c6e:	b086      	sub	sp, #24
     c70:	af00      	add	r7, sp, #0
     c72:	60f8      	str	r0, [r7, #12]
     c74:	60b9      	str	r1, [r7, #8]
     c76:	1dfb      	adds	r3, r7, #7
     c78:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:346
  AdcLdd1_TDeviceDataPtr DeviceDataPrv = (AdcLdd1_TDeviceDataPtr)DeviceDataPtr;
     c7a:	68fb      	ldr	r3, [r7, #12]
     c7c:	617b      	str	r3, [r7, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:350

  /* Sample count test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if ((SampleCount > AdcLdd1_MAX_HW_SAMPLE_COUNT) || (SampleCount == 0U)) { /* Is number of sample greater then supported by the HW? */
     c7e:	1dfb      	adds	r3, r7, #7
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	2b01      	cmp	r3, #1
     c84:	d803      	bhi.n	c8e <AdcLdd1_CreateSampleGroup+0x22>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:350 (discriminator 1)
     c86:	1dfb      	adds	r3, r7, #7
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d101      	bne.n	c92 <AdcLdd1_CreateSampleGroup+0x26>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:351
    return ERR_PARAM_SAMPLE_COUNT;     /* Yes, return ERR_PARAM_SAMPLE_COUNT */
     c8e:	2396      	movs	r3, #150	; 0x96
     c90:	e017      	b.n	cc2 <AdcLdd1_CreateSampleGroup+0x56>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:353
  }
  if (ADC_PDD_GetConversionActiveFlag(ADC0_BASE_PTR) != 0U) { /* Last measurement still pending? */
     c92:	4b0e      	ldr	r3, [pc, #56]	; (ccc <AdcLdd1_CreateSampleGroup+0x60>)
     c94:	6a1a      	ldr	r2, [r3, #32]
     c96:	2380      	movs	r3, #128	; 0x80
     c98:	4013      	ands	r3, r2
     c9a:	d001      	beq.n	ca0 <AdcLdd1_CreateSampleGroup+0x34>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:354
    return ERR_BUSY;                   /* Yes, return ERR_BUSY */
     c9c:	2308      	movs	r3, #8
     c9e:	e010      	b.n	cc2 <AdcLdd1_CreateSampleGroup+0x56>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:356
  }
  DeviceDataPrv->SampleCount = SampleCount; /* Remember sample count */
     ca0:	697b      	ldr	r3, [r7, #20]
     ca2:	1dfa      	adds	r2, r7, #7
     ca4:	7812      	ldrb	r2, [r2, #0]
     ca6:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:359
  /* Channel index test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (SampleGroupPtr[0].ChannelIdx >= AdcLdd1_CHANNEL_COUNT) { /* Is channel index out of range? */
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	2b00      	cmp	r3, #0
     cae:	d001      	beq.n	cb4 <AdcLdd1_CreateSampleGroup+0x48>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:360
    return ERR_PARAM_INDEX;            /* Yes, return ERR_PARAM_INDEX */
     cb0:	2382      	movs	r3, #130	; 0x82
     cb2:	e006      	b.n	cc2 <AdcLdd1_CreateSampleGroup+0x56>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:362
  }
  DeviceDataPrv->FirstSample = (ChannelToPin[SampleGroupPtr[0].ChannelIdx]) | (uint8_t)(LDD_ADC_ON_MEASUREMENT_COMPLETE); /* Remember first sample */
     cb4:	2346      	movs	r3, #70	; 0x46
     cb6:	2240      	movs	r2, #64	; 0x40
     cb8:	4313      	orrs	r3, r2
     cba:	b2da      	uxtb	r2, r3
     cbc:	697b      	ldr	r3, [r7, #20]
     cbe:	705a      	strb	r2, [r3, #1]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:363
  return ERR_OK;                       /* OK */
     cc0:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:364
}
     cc2:	1c18      	adds	r0, r3, #0
     cc4:	46bd      	mov	sp, r7
     cc6:	b006      	add	sp, #24
     cc8:	bd80      	pop	{r7, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	4003b000 	.word	0x4003b000

00000cd0 <AdcLdd1_GetMeasuredValues>:
AdcLdd1_GetMeasuredValues():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:399
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError AdcLdd1_GetMeasuredValues(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	b084      	sub	sp, #16
     cd4:	af00      	add	r7, sp, #0
     cd6:	6078      	str	r0, [r7, #4]
     cd8:	6039      	str	r1, [r7, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:401
  uint8_t Sample;
  AdcLdd1_TResultData *pBuffer = (AdcLdd1_TResultData *)BufferPtr;
     cda:	683b      	ldr	r3, [r7, #0]
     cdc:	60bb      	str	r3, [r7, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:405

  /* Copy values from result registers defined in the active sample
     group to the user supplied buffer */
  for (Sample = 0U; Sample < ((AdcLdd1_TDeviceDataPtr)DeviceDataPtr)->SampleCount; Sample++) {
     cde:	1c3b      	adds	r3, r7, #0
     ce0:	330f      	adds	r3, #15
     ce2:	2200      	movs	r2, #0
     ce4:	701a      	strb	r2, [r3, #0]
     ce6:	e014      	b.n	d12 <AdcLdd1_GetMeasuredValues+0x42>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:406 (discriminator 2)
    pBuffer[Sample] =(uint8_t)(ADC_PDD_GetResultValueRaw(ADC0_BASE_PTR, Sample));
     ce8:	1c3b      	adds	r3, r7, #0
     cea:	330f      	adds	r3, #15
     cec:	781b      	ldrb	r3, [r3, #0]
     cee:	68ba      	ldr	r2, [r7, #8]
     cf0:	18d3      	adds	r3, r2, r3
     cf2:	4a0e      	ldr	r2, [pc, #56]	; (d2c <AdcLdd1_GetMeasuredValues+0x5c>)
     cf4:	1c39      	adds	r1, r7, #0
     cf6:	310f      	adds	r1, #15
     cf8:	7809      	ldrb	r1, [r1, #0]
     cfa:	3104      	adds	r1, #4
     cfc:	0089      	lsls	r1, r1, #2
     cfe:	588a      	ldr	r2, [r1, r2]
     d00:	b2d2      	uxtb	r2, r2
     d02:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:405 (discriminator 2)
  uint8_t Sample;
  AdcLdd1_TResultData *pBuffer = (AdcLdd1_TResultData *)BufferPtr;

  /* Copy values from result registers defined in the active sample
     group to the user supplied buffer */
  for (Sample = 0U; Sample < ((AdcLdd1_TDeviceDataPtr)DeviceDataPtr)->SampleCount; Sample++) {
     d04:	1c3b      	adds	r3, r7, #0
     d06:	330f      	adds	r3, #15
     d08:	781a      	ldrb	r2, [r3, #0]
     d0a:	1c3b      	adds	r3, r7, #0
     d0c:	330f      	adds	r3, #15
     d0e:	3201      	adds	r2, #1
     d10:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:405 (discriminator 1)
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	781b      	ldrb	r3, [r3, #0]
     d16:	1c3a      	adds	r2, r7, #0
     d18:	320f      	adds	r2, #15
     d1a:	7812      	ldrb	r2, [r2, #0]
     d1c:	429a      	cmp	r2, r3
     d1e:	d3e3      	bcc.n	ce8 <AdcLdd1_GetMeasuredValues+0x18>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:408
    pBuffer[Sample] =(uint8_t)(ADC_PDD_GetResultValueRaw(ADC0_BASE_PTR, Sample));
  }
  return ERR_OK;                       /* OK */
     d20:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:409
}
     d22:	1c18      	adds	r0, r3, #0
     d24:	46bd      	mov	sp, r7
     d26:	b004      	add	sp, #16
     d28:	bd80      	pop	{r7, pc}
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	4003b000 	.word	0x4003b000

00000d30 <AdcLdd1_GetCalibrationResultStatus>:
AdcLdd1_GetCalibrationResultStatus():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:497
**                           ERR_FAILED - Last calibration hasn't been
**                           finished correctly
*/
/* ===================================================================*/
LDD_TError AdcLdd1_GetCalibrationResultStatus(LDD_TDeviceData *DeviceDataPtr)
{
     d30:	b580      	push	{r7, lr}
     d32:	b084      	sub	sp, #16
     d34:	af00      	add	r7, sp, #0
     d36:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:501
  uint32_t GainValue;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  if (ADC_PDD_GetCalibrationFailedStatusFlag(ADC0_BASE_PTR)) {
     d38:	4b2a      	ldr	r3, [pc, #168]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     d3c:	2340      	movs	r3, #64	; 0x40
     d3e:	4013      	ands	r3, r2
     d40:	d001      	beq.n	d46 <AdcLdd1_GetCalibrationResultStatus+0x16>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:502
    return ERR_FAILED;
     d42:	231b      	movs	r3, #27
     d44:	e04a      	b.n	ddc <AdcLdd1_GetCalibrationResultStatus+0xac>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:506
  }
  /* If calibration is successfully passed place calibrated value into gain registers */
  /* Cumulated gradually because of undefined behavior: the order of volatile accesses is undefined in this statement */
  GainValue = ADC_PDD_GetPlus0CalibrationValue(ADC0_BASE_PTR); /* Find plus gain value */
     d46:	4b27      	ldr	r3, [pc, #156]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     d4a:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:507
  GainValue += ADC_PDD_GetPlus1CalibrationValue(ADC0_BASE_PTR);
     d4c:	4b25      	ldr	r3, [pc, #148]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     d50:	68fa      	ldr	r2, [r7, #12]
     d52:	18d3      	adds	r3, r2, r3
     d54:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:508
  GainValue += ADC_PDD_GetPlus2CalibrationValue(ADC0_BASE_PTR);
     d56:	4b23      	ldr	r3, [pc, #140]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     d5a:	68fa      	ldr	r2, [r7, #12]
     d5c:	18d3      	adds	r3, r2, r3
     d5e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:509
  GainValue += ADC_PDD_GetPlus3CalibrationValue(ADC0_BASE_PTR);
     d60:	4b20      	ldr	r3, [pc, #128]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     d64:	68fa      	ldr	r2, [r7, #12]
     d66:	18d3      	adds	r3, r2, r3
     d68:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:510
  GainValue += ADC_PDD_GetPlus4CalibrationValue(ADC0_BASE_PTR);
     d6a:	4b1e      	ldr	r3, [pc, #120]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     d6e:	68fa      	ldr	r2, [r7, #12]
     d70:	18d3      	adds	r3, r2, r3
     d72:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:511
  GainValue += ADC_PDD_GetPlusSCalibrationValue(ADC0_BASE_PTR);
     d74:	4b1b      	ldr	r3, [pc, #108]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     d78:	68fa      	ldr	r2, [r7, #12]
     d7a:	18d3      	adds	r3, r2, r3
     d7c:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:512
  GainValue = (GainValue >> 1U) | 0x8000U;
     d7e:	68fb      	ldr	r3, [r7, #12]
     d80:	085b      	lsrs	r3, r3, #1
     d82:	2280      	movs	r2, #128	; 0x80
     d84:	0212      	lsls	r2, r2, #8
     d86:	4313      	orrs	r3, r2
     d88:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:513
  ADC_PDD_SetPlusGainValue(ADC0_BASE_PTR,GainValue); /* Set plus gain value */
     d8a:	4b16      	ldr	r3, [pc, #88]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d8c:	68fa      	ldr	r2, [r7, #12]
     d8e:	62da      	str	r2, [r3, #44]	; 0x2c
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:514
  GainValue = ADC_PDD_GetMinus0CalibrationValue(ADC0_BASE_PTR); /* Find minus gain value */
     d90:	4b14      	ldr	r3, [pc, #80]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     d94:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:515
  GainValue += ADC_PDD_GetMinus1CalibrationValue(ADC0_BASE_PTR);
     d96:	4b13      	ldr	r3, [pc, #76]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     d9a:	68fa      	ldr	r2, [r7, #12]
     d9c:	18d3      	adds	r3, r2, r3
     d9e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:516
  GainValue += ADC_PDD_GetMinus2CalibrationValue(ADC0_BASE_PTR);
     da0:	4b10      	ldr	r3, [pc, #64]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     da4:	68fa      	ldr	r2, [r7, #12]
     da6:	18d3      	adds	r3, r2, r3
     da8:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:517
  GainValue += ADC_PDD_GetMinus3CalibrationValue(ADC0_BASE_PTR);
     daa:	4b0e      	ldr	r3, [pc, #56]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     dae:	68fa      	ldr	r2, [r7, #12]
     db0:	18d3      	adds	r3, r2, r3
     db2:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:518
  GainValue += ADC_PDD_GetMinus4CalibrationValue(ADC0_BASE_PTR);
     db4:	4b0b      	ldr	r3, [pc, #44]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     db8:	68fa      	ldr	r2, [r7, #12]
     dba:	18d3      	adds	r3, r2, r3
     dbc:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:519
  GainValue += ADC_PDD_GetMinusSCalibrationValue(ADC0_BASE_PTR);
     dbe:	4b09      	ldr	r3, [pc, #36]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     dc2:	68fa      	ldr	r2, [r7, #12]
     dc4:	18d3      	adds	r3, r2, r3
     dc6:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:520
  GainValue =  (GainValue >> 1U) | 0x8000U;
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	085b      	lsrs	r3, r3, #1
     dcc:	2280      	movs	r2, #128	; 0x80
     dce:	0212      	lsls	r2, r2, #8
     dd0:	4313      	orrs	r3, r2
     dd2:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:521
  ADC_PDD_SetMinusGainValue(ADC0_BASE_PTR,GainValue); /* Set minus gain value */
     dd4:	4b03      	ldr	r3, [pc, #12]	; (de4 <AdcLdd1_GetCalibrationResultStatus+0xb4>)
     dd6:	68fa      	ldr	r2, [r7, #12]
     dd8:	631a      	str	r2, [r3, #48]	; 0x30
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:522
  return ERR_OK;
     dda:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:523
}
     ddc:	1c18      	adds	r0, r3, #0
     dde:	46bd      	mov	sp, r7
     de0:	b004      	add	sp, #16
     de2:	bd80      	pop	{r7, pc}
     de4:	4003b000 	.word	0x4003b000

00000de8 <AdcLdd1_MeasurementCompleteInterrupt>:
AdcLdd1_MeasurementCompleteInterrupt():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:535
**         Measurement complete interrupt handler
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(AdcLdd1_MeasurementCompleteInterrupt)
{
     de8:	b580      	push	{r7, lr}
     dea:	b082      	sub	sp, #8
     dec:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:537
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  AdcLdd1_TDeviceDataPtr DeviceDataPrv = INT_ADC0__DEFAULT_RTOS_ISRPARAM;
     dee:	4b08      	ldr	r3, [pc, #32]	; (e10 <AdcLdd1_MeasurementCompleteInterrupt+0x28>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	607b      	str	r3, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:538
  DeviceDataPrv->CompleteStatus = TRUE; /* Set measurement complete status flag */
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	2201      	movs	r2, #1
     df8:	709a      	strb	r2, [r3, #2]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:539
  AdcLdd1_OnMeasurementComplete(DeviceDataPrv->UserData);
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	685b      	ldr	r3, [r3, #4]
     dfe:	1c18      	adds	r0, r3, #0
     e00:	f000 fa64 	bl	12cc <AdcLdd1_OnMeasurementComplete>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:540
  (void)ADC_PDD_GetResultValueRaw(ADC0_BASE_PTR, 0U); /* Clear conversion complete flag */
     e04:	4b03      	ldr	r3, [pc, #12]	; (e14 <AdcLdd1_MeasurementCompleteInterrupt+0x2c>)
     e06:	691b      	ldr	r3, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/AdcLdd1.c:541
}
     e08:	46bd      	mov	sp, r7
     e0a:	b002      	add	sp, #8
     e0c:	bd80      	pop	{r7, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	1ffff08c 	.word	0x1ffff08c
     e14:	4003b000 	.word	0x4003b000

00000e18 <BitIoLdd1_Init>:
BitIoLdd1_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:123
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd1_Init(LDD_TUserData *UserDataPtr)
{
     e18:	b580      	push	{r7, lr}
     e1a:	b084      	sub	sp, #16
     e1c:	af00      	add	r7, sp, #0
     e1e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:128
  /* Allocate device structure */
  BitIoLdd1_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     e20:	4b10      	ldr	r3, [pc, #64]	; (e64 <BitIoLdd1_Init+0x4c>)
     e22:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:129
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     e24:	68fb      	ldr	r3, [r7, #12]
     e26:	687a      	ldr	r2, [r7, #4]
     e28:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:132
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x80 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x80);
     e2a:	4b0f      	ldr	r3, [pc, #60]	; (e68 <BitIoLdd1_Init+0x50>)
     e2c:	4a0e      	ldr	r2, [pc, #56]	; (e68 <BitIoLdd1_Init+0x50>)
     e2e:	6952      	ldr	r2, [r2, #20]
     e30:	2180      	movs	r1, #128	; 0x80
     e32:	430a      	orrs	r2, r1
     e34:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:135
  /* Set initialization value */
  /* GPIOD_PDOR: PDO&=~0x80 */
  GPIOD_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x80));
     e36:	4b0c      	ldr	r3, [pc, #48]	; (e68 <BitIoLdd1_Init+0x50>)
     e38:	4a0b      	ldr	r2, [pc, #44]	; (e68 <BitIoLdd1_Init+0x50>)
     e3a:	6812      	ldr	r2, [r2, #0]
     e3c:	2180      	movs	r1, #128	; 0x80
     e3e:	438a      	bics	r2, r1
     e40:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:138
  /* Initialization of Port Control register */
  /* PORTD_PCR7: ISF=0,MUX=1 */
  PORTD_PCR7 = (uint32_t)((PORTD_PCR7 & (uint32_t)~(uint32_t)(
     e42:	4b0a      	ldr	r3, [pc, #40]	; (e6c <BitIoLdd1_Init+0x54>)
     e44:	4a09      	ldr	r2, [pc, #36]	; (e6c <BitIoLdd1_Init+0x54>)
     e46:	69d1      	ldr	r1, [r2, #28]
     e48:	4a09      	ldr	r2, [pc, #36]	; (e70 <BitIoLdd1_Init+0x58>)
     e4a:	400a      	ands	r2, r1
     e4c:	2180      	movs	r1, #128	; 0x80
     e4e:	0049      	lsls	r1, r1, #1
     e50:	430a      	orrs	r2, r1
     e52:	61da      	str	r2, [r3, #28]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:145
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd1_ID,DeviceDataPrv);
     e54:	4b07      	ldr	r3, [pc, #28]	; (e74 <BitIoLdd1_Init+0x5c>)
     e56:	68fa      	ldr	r2, [r7, #12]
     e58:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:146
  return ((LDD_TDeviceData *)DeviceDataPrv);
     e5a:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:147
}
     e5c:	1c18      	adds	r0, r3, #0
     e5e:	46bd      	mov	sp, r7
     e60:	b004      	add	sp, #16
     e62:	bd80      	pop	{r7, pc}
     e64:	1ffff090 	.word	0x1ffff090
     e68:	400ff0c0 	.word	0x400ff0c0
     e6c:	4004c000 	.word	0x4004c000
     e70:	fefff8ff 	.word	0xfefff8ff
     e74:	1ffff0a8 	.word	0x1ffff0a8

00000e78 <BitIoLdd1_GetVal>:
BitIoLdd1_GetVal():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:169
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd1_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
     e78:	b580      	push	{r7, lr}
     e7a:	b084      	sub	sp, #16
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:173
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd1_MODULE_BASE_ADDRESS) & BitIoLdd1_PORT_MASK;
     e80:	4b06      	ldr	r3, [pc, #24]	; (e9c <BitIoLdd1_GetVal+0x24>)
     e82:	681a      	ldr	r2, [r3, #0]
     e84:	2380      	movs	r3, #128	; 0x80
     e86:	4013      	ands	r3, r2
     e88:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:174
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
     e8a:	68fb      	ldr	r3, [r7, #12]
     e8c:	1e5a      	subs	r2, r3, #1
     e8e:	4193      	sbcs	r3, r2
     e90:	b2db      	uxtb	r3, r3
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:175
}
     e92:	1c18      	adds	r0, r3, #0
     e94:	46bd      	mov	sp, r7
     e96:	b004      	add	sp, #16
     e98:	bd80      	pop	{r7, pc}
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	f80ff0c0 	.word	0xf80ff0c0

00000ea0 <BitIoLdd1_ClrVal>:
BitIoLdd1_ClrVal():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:226
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd1_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
     ea0:	b580      	push	{r7, lr}
     ea2:	b082      	sub	sp, #8
     ea4:	af00      	add	r7, sp, #0
     ea6:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:228
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(BitIoLdd1_MODULE_BASE_ADDRESS, BitIoLdd1_PORT_MASK);
     ea8:	4b02      	ldr	r3, [pc, #8]	; (eb4 <BitIoLdd1_ClrVal+0x14>)
     eaa:	2280      	movs	r2, #128	; 0x80
     eac:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:229
}
     eae:	46bd      	mov	sp, r7
     eb0:	b002      	add	sp, #8
     eb2:	bd80      	pop	{r7, pc}
     eb4:	f80ff0c0 	.word	0xf80ff0c0

00000eb8 <BitIoLdd1_SetVal>:
BitIoLdd1_SetVal():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:246
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd1_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
     eb8:	b580      	push	{r7, lr}
     eba:	b082      	sub	sp, #8
     ebc:	af00      	add	r7, sp, #0
     ebe:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:248
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd1_MODULE_BASE_ADDRESS, BitIoLdd1_PORT_MASK);
     ec0:	4b02      	ldr	r3, [pc, #8]	; (ecc <BitIoLdd1_SetVal+0x14>)
     ec2:	2280      	movs	r2, #128	; 0x80
     ec4:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd1.c:249
}
     ec6:	46bd      	mov	sp, r7
     ec8:	b002      	add	sp, #8
     eca:	bd80      	pop	{r7, pc}
     ecc:	f80ff0c0 	.word	0xf80ff0c0

00000ed0 <BitIoLdd2_Init>:
BitIoLdd2_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:123
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd2_Init(LDD_TUserData *UserDataPtr)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b084      	sub	sp, #16
     ed4:	af00      	add	r7, sp, #0
     ed6:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:128
  /* Allocate device structure */
  BitIoLdd2_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     ed8:	4b10      	ldr	r3, [pc, #64]	; (f1c <BitIoLdd2_Init+0x4c>)
     eda:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:129
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     edc:	68fb      	ldr	r3, [r7, #12]
     ede:	687a      	ldr	r2, [r7, #4]
     ee0:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:132
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=2 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x02);
     ee2:	4b0f      	ldr	r3, [pc, #60]	; (f20 <BitIoLdd2_Init+0x50>)
     ee4:	4a0e      	ldr	r2, [pc, #56]	; (f20 <BitIoLdd2_Init+0x50>)
     ee6:	6952      	ldr	r2, [r2, #20]
     ee8:	2102      	movs	r1, #2
     eea:	430a      	orrs	r2, r1
     eec:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:135
  /* Set initialization value */
  /* GPIOE_PDOR: PDO&=~2 */
  GPIOE_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x02));
     eee:	4b0c      	ldr	r3, [pc, #48]	; (f20 <BitIoLdd2_Init+0x50>)
     ef0:	4a0b      	ldr	r2, [pc, #44]	; (f20 <BitIoLdd2_Init+0x50>)
     ef2:	6812      	ldr	r2, [r2, #0]
     ef4:	2102      	movs	r1, #2
     ef6:	438a      	bics	r2, r1
     ef8:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:138
  /* Initialization of Port Control register */
  /* PORTE_PCR1: ISF=0,MUX=1 */
  PORTE_PCR1 = (uint32_t)((PORTE_PCR1 & (uint32_t)~(uint32_t)(
     efa:	4b0a      	ldr	r3, [pc, #40]	; (f24 <BitIoLdd2_Init+0x54>)
     efc:	4a09      	ldr	r2, [pc, #36]	; (f24 <BitIoLdd2_Init+0x54>)
     efe:	6851      	ldr	r1, [r2, #4]
     f00:	4a09      	ldr	r2, [pc, #36]	; (f28 <BitIoLdd2_Init+0x58>)
     f02:	400a      	ands	r2, r1
     f04:	2180      	movs	r1, #128	; 0x80
     f06:	0049      	lsls	r1, r1, #1
     f08:	430a      	orrs	r2, r1
     f0a:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:145
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd2_ID,DeviceDataPrv);
     f0c:	4b07      	ldr	r3, [pc, #28]	; (f2c <BitIoLdd2_Init+0x5c>)
     f0e:	68fa      	ldr	r2, [r7, #12]
     f10:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:146
  return ((LDD_TDeviceData *)DeviceDataPrv);
     f12:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:147
}
     f14:	1c18      	adds	r0, r3, #0
     f16:	46bd      	mov	sp, r7
     f18:	b004      	add	sp, #16
     f1a:	bd80      	pop	{r7, pc}
     f1c:	1ffff094 	.word	0x1ffff094
     f20:	400ff100 	.word	0x400ff100
     f24:	4004d000 	.word	0x4004d000
     f28:	fefff8ff 	.word	0xfefff8ff
     f2c:	1ffff0a8 	.word	0x1ffff0a8

00000f30 <BitIoLdd2_ClrVal>:
BitIoLdd2_ClrVal():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:226
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd2_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
     f30:	b580      	push	{r7, lr}
     f32:	b082      	sub	sp, #8
     f34:	af00      	add	r7, sp, #0
     f36:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:228
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(BitIoLdd2_MODULE_BASE_ADDRESS, BitIoLdd2_PORT_MASK);
     f38:	4b02      	ldr	r3, [pc, #8]	; (f44 <BitIoLdd2_ClrVal+0x14>)
     f3a:	2202      	movs	r2, #2
     f3c:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:229
}
     f3e:	46bd      	mov	sp, r7
     f40:	b002      	add	sp, #8
     f42:	bd80      	pop	{r7, pc}
     f44:	f80ff100 	.word	0xf80ff100

00000f48 <BitIoLdd2_SetVal>:
BitIoLdd2_SetVal():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:246
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd2_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
     f4e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:248
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd2_MODULE_BASE_ADDRESS, BitIoLdd2_PORT_MASK);
     f50:	4b02      	ldr	r3, [pc, #8]	; (f5c <BitIoLdd2_SetVal+0x14>)
     f52:	2202      	movs	r2, #2
     f54:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd2.c:249
}
     f56:	46bd      	mov	sp, r7
     f58:	b002      	add	sp, #8
     f5a:	bd80      	pop	{r7, pc}
     f5c:	f80ff100 	.word	0xf80ff100

00000f60 <BitIoLdd4_Init>:
BitIoLdd4_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:120
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd4_Init(LDD_TUserData *UserDataPtr)
{
     f60:	b580      	push	{r7, lr}
     f62:	b084      	sub	sp, #16
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:125
  /* Allocate device structure */
  BitIoLdd4_TDeviceDataPtr DeviceDataPrv;

  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     f68:	4b11      	ldr	r3, [pc, #68]	; (fb0 <BitIoLdd4_Init+0x50>)
     f6a:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:126
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     f6c:	68fb      	ldr	r3, [r7, #12]
     f6e:	687a      	ldr	r2, [r7, #4]
     f70:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:129
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x00200000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x00200000);
     f72:	4b10      	ldr	r3, [pc, #64]	; (fb4 <BitIoLdd4_Init+0x54>)
     f74:	4a0f      	ldr	r2, [pc, #60]	; (fb4 <BitIoLdd4_Init+0x54>)
     f76:	6952      	ldr	r2, [r2, #20]
     f78:	2180      	movs	r1, #128	; 0x80
     f7a:	0389      	lsls	r1, r1, #14
     f7c:	430a      	orrs	r2, r1
     f7e:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:132
  /* Set initialization value */
  /* GPIOE_PDOR: PDO&=~0x00200000 */
  GPIOE_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x00200000));
     f80:	4b0c      	ldr	r3, [pc, #48]	; (fb4 <BitIoLdd4_Init+0x54>)
     f82:	4a0c      	ldr	r2, [pc, #48]	; (fb4 <BitIoLdd4_Init+0x54>)
     f84:	6811      	ldr	r1, [r2, #0]
     f86:	4a0c      	ldr	r2, [pc, #48]	; (fb8 <BitIoLdd4_Init+0x58>)
     f88:	400a      	ands	r2, r1
     f8a:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:135
  /* Initialization of Port Control register */
  /* PORTE_PCR21: ISF=0,MUX=1 */
  PORTE_PCR21 = (uint32_t)((PORTE_PCR21 & (uint32_t)~(uint32_t)(
     f8c:	4b0b      	ldr	r3, [pc, #44]	; (fbc <BitIoLdd4_Init+0x5c>)
     f8e:	4a0b      	ldr	r2, [pc, #44]	; (fbc <BitIoLdd4_Init+0x5c>)
     f90:	6d51      	ldr	r1, [r2, #84]	; 0x54
     f92:	4a0b      	ldr	r2, [pc, #44]	; (fc0 <BitIoLdd4_Init+0x60>)
     f94:	400a      	ands	r2, r1
     f96:	2180      	movs	r1, #128	; 0x80
     f98:	0049      	lsls	r1, r1, #1
     f9a:	430a      	orrs	r2, r1
     f9c:	655a      	str	r2, [r3, #84]	; 0x54
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:142
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd4_ID,DeviceDataPrv);
     f9e:	4b09      	ldr	r3, [pc, #36]	; (fc4 <BitIoLdd4_Init+0x64>)
     fa0:	68fa      	ldr	r2, [r7, #12]
     fa2:	619a      	str	r2, [r3, #24]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:143
  return ((LDD_TDeviceData *)DeviceDataPrv);
     fa4:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/BitIoLdd4.c:144
}
     fa6:	1c18      	adds	r0, r3, #0
     fa8:	46bd      	mov	sp, r7
     faa:	b004      	add	sp, #16
     fac:	bd80      	pop	{r7, pc}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	1ffff098 	.word	0x1ffff098
     fb4:	400ff100 	.word	0x400ff100
     fb8:	ffdfffff 	.word	0xffdfffff
     fbc:	4004d000 	.word	0x4004d000
     fc0:	fefff8ff 	.word	0xfefff8ff
     fc4:	1ffff0a8 	.word	0x1ffff0a8

00000fc8 <TimerIntLdd1_OnInterrupt>:
TimerIntLdd1_OnInterrupt():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ClockInterruption.c:186
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void TimerIntLdd1_OnInterrupt(LDD_TUserData *UserDataPtr)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b082      	sub	sp, #8
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ClockInterruption.c:188
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  ClockInterruption_OnInterrupt();     /* Invoke OnInterrupt event */
     fd0:	f7ff fb8e 	bl	6f0 <ClockInterruption_OnInterrupt>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ClockInterruption.c:189
}
     fd4:	46bd      	mov	sp, r7
     fd6:	b002      	add	sp, #8
     fd8:	bd80      	pop	{r7, pc}
     fda:	46c0      	nop			; (mov r8, r8)

00000fdc <Cpu_INT_NMIInterrupt>:
Cpu_INT_NMIInterrupt():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:296
**         This ISR services the Non Maskable Interrupt interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_INT_NMIInterrupt)
{
     fdc:	b580      	push	{r7, lr}
     fde:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:297
  Cpu_OnNMIINT();
     fe0:	f7ff fb82 	bl	6e8 <Cpu_OnNMIINT>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:298
}
     fe4:	46bd      	mov	sp, r7
     fe6:	bd80      	pop	{r7, pc}

00000fe8 <Cpu_Interrupt>:
Cpu_Interrupt():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:310
**         This ISR services an unused interrupt/exception vector.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_Interrupt)
{
     fe8:	b580      	push	{r7, lr}
     fea:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:312
  /* This code can be changed using the CPU component property "Build Options / Unhandled int code" */
  PE_DEBUGHALT();
     fec:	beff      	bkpt	0x00ff
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:313
}
     fee:	46bd      	mov	sp, r7
     ff0:	bd80      	pop	{r7, pc}
     ff2:	46c0      	nop			; (mov r8, r8)

00000ff4 <__init_hardware>:
__init_hardware():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:321
/*** !!! Here you can place your own code using property "User data declarations" on the build options tab. !!! ***/

/*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware). The function is linked to the EWL library */
/*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
void __init_hardware(void)
{
     ff4:	b580      	push	{r7, lr}
     ff6:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:327

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
     ff8:	4a36      	ldr	r2, [pc, #216]	; (10d4 <__init_hardware+0xe0>)
     ffa:	4937      	ldr	r1, [pc, #220]	; (10d8 <__init_hardware+0xe4>)
     ffc:	4b37      	ldr	r3, [pc, #220]	; (10dc <__init_hardware+0xe8>)
     ffe:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:330
  /* Disable the WDOG module */
  /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COPT=0,COPCLKS=0,COPW=0 */
  SIM_COPC = SIM_COPC_COPT(0x00);
    1000:	4a37      	ldr	r2, [pc, #220]	; (10e0 <__init_hardware+0xec>)
    1002:	2388      	movs	r3, #136	; 0x88
    1004:	015b      	lsls	r3, r3, #5
    1006:	2100      	movs	r1, #0
    1008:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:334

  /* System clock initialization */
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    100a:	4a35      	ldr	r2, [pc, #212]	; (10e0 <__init_hardware+0xec>)
    100c:	4b35      	ldr	r3, [pc, #212]	; (10e4 <__init_hardware+0xf0>)
    100e:	21c0      	movs	r1, #192	; 0xc0
    1010:	0289      	lsls	r1, r1, #10
    1012:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:336
  /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
    1014:	4a32      	ldr	r2, [pc, #200]	; (10e0 <__init_hardware+0xec>)
    1016:	4932      	ldr	r1, [pc, #200]	; (10e0 <__init_hardware+0xec>)
    1018:	4b33      	ldr	r3, [pc, #204]	; (10e8 <__init_hardware+0xf4>)
    101a:	58cb      	ldr	r3, [r1, r3]
    101c:	21f8      	movs	r1, #248	; 0xf8
    101e:	0189      	lsls	r1, r1, #6
    1020:	4319      	orrs	r1, r3
    1022:	4b31      	ldr	r3, [pc, #196]	; (10e8 <__init_hardware+0xf4>)
    1024:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:341
               SIM_SCGC5_PORTD_MASK |
               SIM_SCGC5_PORTC_MASK |
               SIM_SCGC5_PORTB_MASK |
               SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    1026:	4b31      	ldr	r3, [pc, #196]	; (10ec <__init_hardware+0xf8>)
    1028:	789b      	ldrb	r3, [r3, #2]
    102a:	b2db      	uxtb	r3, r3
    102c:	1c1a      	adds	r2, r3, #0
    102e:	2308      	movs	r3, #8
    1030:	4013      	ands	r3, r2
    1032:	d007      	beq.n	1044 <__init_hardware+0x50>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:343
    /* PMC_REGSC: ACKISO=1 */
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    1034:	4b2d      	ldr	r3, [pc, #180]	; (10ec <__init_hardware+0xf8>)
    1036:	4a2d      	ldr	r2, [pc, #180]	; (10ec <__init_hardware+0xf8>)
    1038:	7892      	ldrb	r2, [r2, #2]
    103a:	b2d2      	uxtb	r2, r2
    103c:	2108      	movs	r1, #8
    103e:	430a      	orrs	r2, r1
    1040:	b2d2      	uxtb	r2, r2
    1042:	709a      	strb	r2, [r3, #2]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:346
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescalers */
    1044:	4a26      	ldr	r2, [pc, #152]	; (10e0 <__init_hardware+0xec>)
    1046:	4b27      	ldr	r3, [pc, #156]	; (10e4 <__init_hardware+0xf0>)
    1048:	2100      	movs	r1, #0
    104a:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:348
  /* SIM_SOPT2: ??=0,PLLFLLSEL=0 */
  SIM_SOPT2 &= (uint32_t)~(uint32_t)((SIM_SOPT2_PLLFLLSEL_MASK | 0x00020000U)); /* Select FLL as a clock source for various peripherals */
    104c:	4a24      	ldr	r2, [pc, #144]	; (10e0 <__init_hardware+0xec>)
    104e:	4924      	ldr	r1, [pc, #144]	; (10e0 <__init_hardware+0xec>)
    1050:	4b27      	ldr	r3, [pc, #156]	; (10f0 <__init_hardware+0xfc>)
    1052:	58c9      	ldr	r1, [r1, r3]
    1054:	4b27      	ldr	r3, [pc, #156]	; (10f4 <__init_hardware+0x100>)
    1056:	4019      	ands	r1, r3
    1058:	4b25      	ldr	r3, [pc, #148]	; (10f0 <__init_hardware+0xfc>)
    105a:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:350
  /* SIM_SOPT1: OSC32KSEL=3 */
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
    105c:	4b20      	ldr	r3, [pc, #128]	; (10e0 <__init_hardware+0xec>)
    105e:	4a20      	ldr	r2, [pc, #128]	; (10e0 <__init_hardware+0xec>)
    1060:	6812      	ldr	r2, [r2, #0]
    1062:	21c0      	movs	r1, #192	; 0xc0
    1064:	0309      	lsls	r1, r1, #12
    1066:	430a      	orrs	r2, r1
    1068:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:352
  /* SIM_SOPT2: TPMSRC=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    106a:	4a1d      	ldr	r2, [pc, #116]	; (10e0 <__init_hardware+0xec>)
    106c:	491c      	ldr	r1, [pc, #112]	; (10e0 <__init_hardware+0xec>)
    106e:	4b20      	ldr	r3, [pc, #128]	; (10f0 <__init_hardware+0xfc>)
    1070:	58c9      	ldr	r1, [r1, r3]
    1072:	4b21      	ldr	r3, [pc, #132]	; (10f8 <__init_hardware+0x104>)
    1074:	400b      	ands	r3, r1
    1076:	2180      	movs	r1, #128	; 0x80
    1078:	0449      	lsls	r1, r1, #17
    107a:	4319      	orrs	r1, r3
    107c:	4b1c      	ldr	r3, [pc, #112]	; (10f0 <__init_hardware+0xfc>)
    107e:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:359
              )) | (uint32_t)(
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* Switch to FEI Mode */
  /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = MCG_C1_CLKS(0x00) |
    1080:	4b1e      	ldr	r3, [pc, #120]	; (10fc <__init_hardware+0x108>)
    1082:	2206      	movs	r2, #6
    1084:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:364
           MCG_C1_FRDIV(0x00) |
           MCG_C1_IREFS_MASK |
           MCG_C1_IRCLKEN_MASK;
  /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
  MCG_C2 = MCG_C2_RANGE0(0x00);
    1086:	4b1d      	ldr	r3, [pc, #116]	; (10fc <__init_hardware+0x108>)
    1088:	2200      	movs	r2, #0
    108a:	705a      	strb	r2, [r3, #1]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:366
  /* MCG_C4: DMX32=0,DRST_DRS=0 */
  MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
    108c:	4b1b      	ldr	r3, [pc, #108]	; (10fc <__init_hardware+0x108>)
    108e:	4a1b      	ldr	r2, [pc, #108]	; (10fc <__init_hardware+0x108>)
    1090:	78d2      	ldrb	r2, [r2, #3]
    1092:	b2d1      	uxtb	r1, r2
    1094:	221f      	movs	r2, #31
    1096:	400a      	ands	r2, r1
    1098:	b2d2      	uxtb	r2, r2
    109a:	70da      	strb	r2, [r3, #3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:368
  /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
  OSC0_CR = OSC_CR_ERCLKEN_MASK;
    109c:	4b18      	ldr	r3, [pc, #96]	; (1100 <__init_hardware+0x10c>)
    109e:	2280      	movs	r2, #128	; 0x80
    10a0:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:370
  /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
  MCG_C5 = MCG_C5_PRDIV0(0x00);
    10a2:	4b16      	ldr	r3, [pc, #88]	; (10fc <__init_hardware+0x108>)
    10a4:	2200      	movs	r2, #0
    10a6:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:372
  /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
  MCG_C6 = MCG_C6_VDIV0(0x00);
    10a8:	4b14      	ldr	r3, [pc, #80]	; (10fc <__init_hardware+0x108>)
    10aa:	2200      	movs	r2, #0
    10ac:	715a      	strb	r2, [r3, #5]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:373
  while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    10ae:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:373 (discriminator 1)
    10b0:	4b12      	ldr	r3, [pc, #72]	; (10fc <__init_hardware+0x108>)
    10b2:	799b      	ldrb	r3, [r3, #6]
    10b4:	b2db      	uxtb	r3, r3
    10b6:	1c1a      	adds	r2, r3, #0
    10b8:	2310      	movs	r3, #16
    10ba:	4013      	ands	r3, r2
    10bc:	d0f8      	beq.n	10b0 <__init_hardware+0xbc>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:375
  }
  while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    10be:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:375 (discriminator 1)
    10c0:	4b0e      	ldr	r3, [pc, #56]	; (10fc <__init_hardware+0x108>)
    10c2:	799b      	ldrb	r3, [r3, #6]
    10c4:	b2db      	uxtb	r3, r3
    10c6:	1c1a      	adds	r2, r3, #0
    10c8:	230c      	movs	r3, #12
    10ca:	4013      	ands	r3, r2
    10cc:	d1f8      	bne.n	10c0 <__init_hardware+0xcc>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:381
  }
  /*** End of PE initialization code after reset ***/

  /*** !!! Here you can place your own code after PE initialization using property "User code after PE initialization" on the build options tab. !!! ***/

}
    10ce:	46bd      	mov	sp, r7
    10d0:	bd80      	pop	{r7, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	e000e000 	.word	0xe000e000
    10d8:	00000000 	.word	0x00000000
    10dc:	00000d08 	.word	0x00000d08
    10e0:	40047000 	.word	0x40047000
    10e4:	00001044 	.word	0x00001044
    10e8:	00001038 	.word	0x00001038
    10ec:	4007d000 	.word	0x4007d000
    10f0:	00001004 	.word	0x00001004
    10f4:	fffcffff 	.word	0xfffcffff
    10f8:	fcffffff 	.word	0xfcffffff
    10fc:	40064000 	.word	0x40064000
    1100:	40065000 	.word	0x40065000

00001104 <PE_low_level_init>:
PE_low_level_init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:397
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PE_low_level_init(void)
{
    1104:	b580      	push	{r7, lr}
    1106:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:403
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
      /* Initialization of the SIM module */
  /* PORTA_PCR4: ISF=0,MUX=7 */
  PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
    1108:	4b38      	ldr	r3, [pc, #224]	; (11ec <PE_low_level_init+0xe8>)
    110a:	4a38      	ldr	r2, [pc, #224]	; (11ec <PE_low_level_init+0xe8>)
    110c:	6911      	ldr	r1, [r2, #16]
    110e:	4a38      	ldr	r2, [pc, #224]	; (11f0 <PE_low_level_init+0xec>)
    1110:	400a      	ands	r2, r1
    1112:	21e0      	movs	r1, #224	; 0xe0
    1114:	00c9      	lsls	r1, r1, #3
    1116:	430a      	orrs	r2, r1
    1118:	611a      	str	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:410
               )) | (uint32_t)(
                PORT_PCR_MUX(0x07)
               ));
        /* Initialization of the RCM module */
  /* RCM_RPFW: RSTFLTSEL=0 */
  RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
    111a:	4b36      	ldr	r3, [pc, #216]	; (11f4 <PE_low_level_init+0xf0>)
    111c:	4a35      	ldr	r2, [pc, #212]	; (11f4 <PE_low_level_init+0xf0>)
    111e:	7952      	ldrb	r2, [r2, #5]
    1120:	b2d2      	uxtb	r2, r2
    1122:	211f      	movs	r1, #31
    1124:	438a      	bics	r2, r1
    1126:	b2d2      	uxtb	r2, r2
    1128:	715a      	strb	r2, [r3, #5]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:412
  /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
  RCM_RPFC &= (uint8_t)~(uint8_t)(
    112a:	4b32      	ldr	r3, [pc, #200]	; (11f4 <PE_low_level_init+0xf0>)
    112c:	4a31      	ldr	r2, [pc, #196]	; (11f4 <PE_low_level_init+0xf0>)
    112e:	7912      	ldrb	r2, [r2, #4]
    1130:	b2d2      	uxtb	r2, r2
    1132:	2107      	movs	r1, #7
    1134:	438a      	bics	r2, r1
    1136:	b2d2      	uxtb	r2, r2
    1138:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:419
               RCM_RPFC_RSTFLTSRW(0x03)
              );
        /* Initialization of the FTFL_FlashConfig module */
      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
  PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
    113a:	4b2f      	ldr	r3, [pc, #188]	; (11f8 <PE_low_level_init+0xf4>)
    113c:	4a2e      	ldr	r2, [pc, #184]	; (11f8 <PE_low_level_init+0xf4>)
    113e:	7812      	ldrb	r2, [r2, #0]
    1140:	b2d2      	uxtb	r2, r2
    1142:	b2d2      	uxtb	r2, r2
    1144:	2173      	movs	r1, #115	; 0x73
    1146:	438a      	bics	r2, r1
    1148:	b2d2      	uxtb	r2, r2
    114a:	2150      	movs	r1, #80	; 0x50
    114c:	430a      	orrs	r2, r1
    114e:	b2d2      	uxtb	r2, r2
    1150:	b2d2      	uxtb	r2, r2
    1152:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:427
               )) | (uint8_t)(
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
    1154:	4b28      	ldr	r3, [pc, #160]	; (11f8 <PE_low_level_init+0xf4>)
    1156:	4a28      	ldr	r2, [pc, #160]	; (11f8 <PE_low_level_init+0xf4>)
    1158:	7852      	ldrb	r2, [r2, #1]
    115a:	b2d2      	uxtb	r2, r2
    115c:	b2d2      	uxtb	r2, r2
    115e:	2163      	movs	r1, #99	; 0x63
    1160:	438a      	bics	r2, r1
    1162:	b2d2      	uxtb	r2, r2
    1164:	2140      	movs	r1, #64	; 0x40
    1166:	430a      	orrs	r2, r1
    1168:	b2d2      	uxtb	r2, r2
    116a:	b2d2      	uxtb	r2, r2
    116c:	705a      	strb	r2, [r3, #1]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:434
                PMC_LVDSC2_LVWV(0x03)
               )) | (uint8_t)(
                PMC_LVDSC2_LVWACK_MASK
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8_t)~(uint8_t)(
    116e:	4b22      	ldr	r3, [pc, #136]	; (11f8 <PE_low_level_init+0xf4>)
    1170:	4a21      	ldr	r2, [pc, #132]	; (11f8 <PE_low_level_init+0xf4>)
    1172:	7892      	ldrb	r2, [r2, #2]
    1174:	b2d2      	uxtb	r2, r2
    1176:	2119      	movs	r1, #25
    1178:	438a      	bics	r2, r1
    117a:	b2d2      	uxtb	r2, r2
    117c:	709a      	strb	r2, [r3, #2]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:440
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
    117e:	4b1f      	ldr	r3, [pc, #124]	; (11fc <PE_low_level_init+0xf8>)
    1180:	2200      	movs	r2, #0
    1182:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:443
  /* Common initialization of the CPU registers */
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
    1184:	4b19      	ldr	r3, [pc, #100]	; (11ec <PE_low_level_init+0xe8>)
    1186:	4a19      	ldr	r2, [pc, #100]	; (11ec <PE_low_level_init+0xe8>)
    1188:	6d11      	ldr	r1, [r2, #80]	; 0x50
    118a:	4a19      	ldr	r2, [pc, #100]	; (11f0 <PE_low_level_init+0xec>)
    118c:	400a      	ands	r2, r1
    118e:	21e0      	movs	r1, #224	; 0xe0
    1190:	00c9      	lsls	r1, r1, #3
    1192:	430a      	orrs	r2, r1
    1194:	651a      	str	r2, [r3, #80]	; 0x50
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:449
                 PORT_PCR_ISF_MASK
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x07)
                ));
  /* NVIC_IPR1: PRI_6=0 */
  NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
    1196:	4a1a      	ldr	r2, [pc, #104]	; (1200 <PE_low_level_init+0xfc>)
    1198:	4919      	ldr	r1, [pc, #100]	; (1200 <PE_low_level_init+0xfc>)
    119a:	23c1      	movs	r3, #193	; 0xc1
    119c:	009b      	lsls	r3, r3, #2
    119e:	58c9      	ldr	r1, [r1, r3]
    11a0:	4b18      	ldr	r3, [pc, #96]	; (1204 <PE_low_level_init+0x100>)
    11a2:	4019      	ands	r1, r3
    11a4:	23c1      	movs	r3, #193	; 0xc1
    11a6:	009b      	lsls	r3, r3, #2
    11a8:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:451
  /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd1_Init(NULL);
    11aa:	2000      	movs	r0, #0
    11ac:	f7ff fe34 	bl	e18 <BitIoLdd1_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:453
  /* ### BitIO_LDD "BitIoLdd2" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd2_Init(NULL);
    11b0:	2000      	movs	r0, #0
    11b2:	f7ff fe8d 	bl	ed0 <BitIoLdd2_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:455
  /* ### TimerInt_LDD "TimerIntLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TimerIntLdd1_Init(NULL);
    11b6:	2000      	movs	r0, #0
    11b8:	f000 fd2e 	bl	1c18 <TimerIntLdd1_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:458
  /* ### TimerInt "ClockInterruption" init code ... */
  /* ### ADC "ImageConverter" init code ... */
  ImageConverter_Init();
    11bc:	f000 f8b4 	bl	1328 <ImageConverter_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:460
  /* ### BitIO_LDD "BitIoLdd4" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd4_Init(NULL);
    11c0:	2000      	movs	r0, #0
    11c2:	f7ff fecd 	bl	f60 <BitIoLdd4_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:462
  /* ### PWM_LDD "PwmLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)PwmLdd1_Init(NULL);
    11c6:	2000      	movs	r0, #0
    11c8:	f000 f8c4 	bl	1354 <PwmLdd1_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:464
  /* ### PWM_LDD "PwmLdd2" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)PwmLdd2_Init(NULL);
    11cc:	2000      	movs	r0, #0
    11ce:	f000 f8eb 	bl	13a8 <PwmLdd2_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:466
  /* ### PWM_LDD "PwmLdd3" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)PwmLdd3_Init(NULL);
    11d2:	2000      	movs	r0, #0
    11d4:	f000 f914 	bl	1400 <PwmLdd3_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:468
  /* ### PWM_LDD "PwmLdd4" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)PwmLdd4_Init(NULL);
    11d8:	2000      	movs	r0, #0
    11da:	f000 f93b 	bl	1454 <PwmLdd4_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:470
  /* ### PWM_LDD "PwmLdd5" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)PwmLdd5_Init(NULL);
    11de:	2000      	movs	r0, #0
    11e0:	f000 f964 	bl	14ac <PwmLdd5_Init>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:471
  __EI();
    11e4:	b662      	cpsie	i
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/Cpu.c:472
}
    11e6:	46bd      	mov	sp, r7
    11e8:	bd80      	pop	{r7, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	40049000 	.word	0x40049000
    11f0:	fefff8ff 	.word	0xfefff8ff
    11f4:	4007f000 	.word	0x4007f000
    11f8:	4007d000 	.word	0x4007d000
    11fc:	4007e000 	.word	0x4007e000
    1200:	e000e100 	.word	0xe000e100
    1204:	ff3fffff 	.word	0xff3fffff

00001208 <ImageConverter_HWEnDi>:
ImageConverter_HWEnDi():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:127
**         Enable and Disable methods and several internal methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ImageConverter_HWEnDi(void)
{
    1208:	b580      	push	{r7, lr}
    120a:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:128
  if (ModeFlg) {                       /* Start or stop measurement? */
    120c:	4b0c      	ldr	r3, [pc, #48]	; (1240 <ImageConverter_HWEnDi+0x38>)
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	b2db      	uxtb	r3, r3
    1212:	2b00      	cmp	r3, #0
    1214:	d012      	beq.n	123c <ImageConverter_HWEnDi+0x34>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:129
    OutFlg = FALSE;                    /* Output value isn't available */
    1216:	4b0b      	ldr	r3, [pc, #44]	; (1244 <ImageConverter_HWEnDi+0x3c>)
    1218:	2200      	movs	r2, #0
    121a:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:130
    SampleGroup[0].ChannelIdx = 0U;
    121c:	4b0a      	ldr	r3, [pc, #40]	; (1248 <ImageConverter_HWEnDi+0x40>)
    121e:	2200      	movs	r2, #0
    1220:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:131
    (void)AdcLdd1_CreateSampleGroup(AdcLdd1_DeviceDataPtr, (LDD_ADC_TSample *)SampleGroup, 1U); /* Configure sample group */
    1222:	4b0a      	ldr	r3, [pc, #40]	; (124c <ImageConverter_HWEnDi+0x44>)
    1224:	681a      	ldr	r2, [r3, #0]
    1226:	4b08      	ldr	r3, [pc, #32]	; (1248 <ImageConverter_HWEnDi+0x40>)
    1228:	1c10      	adds	r0, r2, #0
    122a:	1c19      	adds	r1, r3, #0
    122c:	2201      	movs	r2, #1
    122e:	f7ff fd1d 	bl	c6c <AdcLdd1_CreateSampleGroup>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:132
    (void)AdcLdd1_StartSingleMeasurement(AdcLdd1_DeviceDataPtr);
    1232:	4b06      	ldr	r3, [pc, #24]	; (124c <ImageConverter_HWEnDi+0x44>)
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	1c18      	adds	r0, r3, #0
    1238:	f7ff fcf6 	bl	c28 <AdcLdd1_StartSingleMeasurement>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:134
  }
}
    123c:	46bd      	mov	sp, r7
    123e:	bd80      	pop	{r7, pc}
    1240:	1ffff09d 	.word	0x1ffff09d
    1244:	1ffff0a4 	.word	0x1ffff0a4
    1248:	1ffff0a0 	.word	0x1ffff0a0
    124c:	1ffff27c 	.word	0x1ffff27c

00001250 <ImageConverter_Measure>:
ImageConverter_Measure():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:170
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
*/
/* ===================================================================*/
byte ImageConverter_Measure(bool WaitForResult)
{
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	1c02      	adds	r2, r0, #0
    1258:	1dfb      	adds	r3, r7, #7
    125a:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:171
  if (ModeFlg != STOP) {               /* Is the device in different mode than "stop"? */
    125c:	4b0d      	ldr	r3, [pc, #52]	; (1294 <ImageConverter_Measure+0x44>)
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	b2db      	uxtb	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	d001      	beq.n	126a <ImageConverter_Measure+0x1a>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:172
    return ERR_BUSY;                   /* If yes then error */
    1266:	2308      	movs	r3, #8
    1268:	e00f      	b.n	128a <ImageConverter_Measure+0x3a>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:174
  }
  ModeFlg = MEASURE;                   /* Set state of device to the measure mode */
    126a:	4b0a      	ldr	r3, [pc, #40]	; (1294 <ImageConverter_Measure+0x44>)
    126c:	2201      	movs	r2, #1
    126e:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:175
  ImageConverter_HWEnDi();             /* Enable the device */
    1270:	f7ff ffca 	bl	1208 <ImageConverter_HWEnDi>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:176
  if (WaitForResult) {                 /* Is WaitForResult TRUE? */
    1274:	1dfb      	adds	r3, r7, #7
    1276:	781b      	ldrb	r3, [r3, #0]
    1278:	2b00      	cmp	r3, #0
    127a:	d005      	beq.n	1288 <ImageConverter_Measure+0x38>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:177
    while (ModeFlg == MEASURE) {}      /* If yes then wait for end of measurement */
    127c:	46c0      	nop			; (mov r8, r8)
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:177 (discriminator 1)
    127e:	4b05      	ldr	r3, [pc, #20]	; (1294 <ImageConverter_Measure+0x44>)
    1280:	781b      	ldrb	r3, [r3, #0]
    1282:	b2db      	uxtb	r3, r3
    1284:	2b01      	cmp	r3, #1
    1286:	d0fa      	beq.n	127e <ImageConverter_Measure+0x2e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:179
  }
  return ERR_OK;                       /* OK */
    1288:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:180
}
    128a:	1c18      	adds	r0, r3, #0
    128c:	46bd      	mov	sp, r7
    128e:	b002      	add	sp, #8
    1290:	bd80      	pop	{r7, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	1ffff09d 	.word	0x1ffff09d

00001298 <ImageConverter_GetValue>:
ImageConverter_GetValue():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:263
**                           error may not be supported on some CPUs
**                           (see generated code).
*/
/* ===================================================================*/
byte ImageConverter_GetValue(void* Values)
{
    1298:	b580      	push	{r7, lr}
    129a:	b082      	sub	sp, #8
    129c:	af00      	add	r7, sp, #0
    129e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:264
  if (!OutFlg) {                       /* Is output flag set? */
    12a0:	4b08      	ldr	r3, [pc, #32]	; (12c4 <ImageConverter_GetValue+0x2c>)
    12a2:	781b      	ldrb	r3, [r3, #0]
    12a4:	b2db      	uxtb	r3, r3
    12a6:	2b00      	cmp	r3, #0
    12a8:	d101      	bne.n	12ae <ImageConverter_GetValue+0x16>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:265
    return ERR_NOTAVAIL;               /* If no then error */
    12aa:	2309      	movs	r3, #9
    12ac:	e005      	b.n	12ba <ImageConverter_GetValue+0x22>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:268
  }
  /* Copy measured values */
  *(AdcLdd1_TResultData *)Values = ImageConverter_OutV;
    12ae:	4b06      	ldr	r3, [pc, #24]	; (12c8 <ImageConverter_GetValue+0x30>)
    12b0:	781b      	ldrb	r3, [r3, #0]
    12b2:	b2da      	uxtb	r2, r3
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:269
  return ERR_OK;
    12b8:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:270
}
    12ba:	1c18      	adds	r0, r3, #0
    12bc:	46bd      	mov	sp, r7
    12be:	b002      	add	sp, #8
    12c0:	bd80      	pop	{r7, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	1ffff0a4 	.word	0x1ffff0a4
    12c8:	1ffff278 	.word	0x1ffff278

000012cc <AdcLdd1_OnMeasurementComplete>:
AdcLdd1_OnMeasurementComplete():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:380
**         event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void AdcLdd1_OnMeasurementComplete(LDD_TUserData *UserDataPtr)
{
    12cc:	b580      	push	{r7, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:382
  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  if (ModeFlg == CALIBRATING) {        /* If the driver is in CALIBRATING mode */
    12d4:	4b10      	ldr	r3, [pc, #64]	; (1318 <AdcLdd1_OnMeasurementComplete+0x4c>)
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	b2db      	uxtb	r3, r3
    12da:	2b04      	cmp	r3, #4
    12dc:	d10a      	bne.n	12f4 <AdcLdd1_OnMeasurementComplete+0x28>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:383
    (void)AdcLdd1_GetCalibrationResultStatus(AdcLdd1_DeviceDataPtr);
    12de:	4b0f      	ldr	r3, [pc, #60]	; (131c <AdcLdd1_OnMeasurementComplete+0x50>)
    12e0:	681b      	ldr	r3, [r3, #0]
    12e2:	1c18      	adds	r0, r3, #0
    12e4:	f7ff fd24 	bl	d30 <AdcLdd1_GetCalibrationResultStatus>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:384
    ModeFlg = STOP;                    /* Set the device to the stop mode */
    12e8:	4b0b      	ldr	r3, [pc, #44]	; (1318 <AdcLdd1_OnMeasurementComplete+0x4c>)
    12ea:	2200      	movs	r2, #0
    12ec:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:385
    ImageConverter_OnCalibrationEnd(); /* If yes then invoke user event */
    12ee:	f7ff fa99 	bl	824 <ImageConverter_OnCalibrationEnd>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:386
    return;                            /* Return from interrupt */
    12f2:	e00e      	b.n	1312 <AdcLdd1_OnMeasurementComplete+0x46>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:388
  }
  AdcLdd1_GetMeasuredValues(AdcLdd1_DeviceDataPtr, (LDD_TData *)&ImageConverter_OutV);
    12f4:	4b09      	ldr	r3, [pc, #36]	; (131c <AdcLdd1_OnMeasurementComplete+0x50>)
    12f6:	681a      	ldr	r2, [r3, #0]
    12f8:	4b09      	ldr	r3, [pc, #36]	; (1320 <AdcLdd1_OnMeasurementComplete+0x54>)
    12fa:	1c10      	adds	r0, r2, #0
    12fc:	1c19      	adds	r1, r3, #0
    12fe:	f7ff fce7 	bl	cd0 <AdcLdd1_GetMeasuredValues>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:389
  OutFlg = TRUE;                       /* Measured value is available */
    1302:	4b08      	ldr	r3, [pc, #32]	; (1324 <AdcLdd1_OnMeasurementComplete+0x58>)
    1304:	2201      	movs	r2, #1
    1306:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:390
  ImageConverter_OnEnd();              /* If yes then invoke user event */
    1308:	f7ff fa7c 	bl	804 <ImageConverter_OnEnd>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:391
  ModeFlg = STOP;                      /* Set the device to the stop mode */
    130c:	4b02      	ldr	r3, [pc, #8]	; (1318 <AdcLdd1_OnMeasurementComplete+0x4c>)
    130e:	2200      	movs	r2, #0
    1310:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:392
}
    1312:	46bd      	mov	sp, r7
    1314:	b002      	add	sp, #8
    1316:	bd80      	pop	{r7, pc}
    1318:	1ffff09d 	.word	0x1ffff09d
    131c:	1ffff27c 	.word	0x1ffff27c
    1320:	1ffff278 	.word	0x1ffff278
    1324:	1ffff0a4 	.word	0x1ffff0a4

00001328 <ImageConverter_Init>:
ImageConverter_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:406
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void ImageConverter_Init(void)
{
    1328:	b580      	push	{r7, lr}
    132a:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:407
  OutFlg = FALSE;                      /* No measured value */
    132c:	4b06      	ldr	r3, [pc, #24]	; (1348 <ImageConverter_Init+0x20>)
    132e:	2200      	movs	r2, #0
    1330:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:408
  ModeFlg = STOP;                      /* Device isn't running */
    1332:	4b06      	ldr	r3, [pc, #24]	; (134c <ImageConverter_Init+0x24>)
    1334:	2200      	movs	r2, #0
    1336:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:409
  AdcLdd1_DeviceDataPtr = AdcLdd1_Init(NULL); /* Calling init method of the inherited component */
    1338:	2000      	movs	r0, #0
    133a:	f7ff fc13 	bl	b64 <AdcLdd1_Init>
    133e:	1c02      	adds	r2, r0, #0
    1340:	4b03      	ldr	r3, [pc, #12]	; (1350 <ImageConverter_Init+0x28>)
    1342:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/ImageConverter.c:410
}
    1344:	46bd      	mov	sp, r7
    1346:	bd80      	pop	{r7, pc}
    1348:	1ffff0a4 	.word	0x1ffff0a4
    134c:	1ffff09d 	.word	0x1ffff09d
    1350:	1ffff27c 	.word	0x1ffff27c

00001354 <PwmLdd1_Init>:
PwmLdd1_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:145
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PwmLdd1_Init(LDD_TUserData *UserDataPtr)
{
    1354:	b580      	push	{r7, lr}
    1356:	b084      	sub	sp, #16
    1358:	af00      	add	r7, sp, #0
    135a:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:149
  /* Allocate device structure */
  PwmLdd1_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    135c:	4b10      	ldr	r3, [pc, #64]	; (13a0 <PwmLdd1_Init+0x4c>)
    135e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:150
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1360:	68fb      	ldr	r3, [r7, #12]
    1362:	687a      	ldr	r2, [r7, #4]
    1364:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:151
  DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	2201      	movs	r2, #1
    136a:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:152
  DeviceDataPrv->RatioStore = 0x01U;   /* Ratio after initialization */
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	2201      	movs	r2, #1
    1370:	80da      	strh	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:154
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd1_ID,DeviceDataPrv);
    1372:	4b0c      	ldr	r3, [pc, #48]	; (13a4 <PwmLdd1_Init+0x50>)
    1374:	68fa      	ldr	r2, [r7, #12]
    1376:	621a      	str	r2, [r3, #32]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:155
  DeviceDataPrv->LinkedDeviceDataPtr = TU2_Init((LDD_TUserData *)NULL);
    1378:	2000      	movs	r0, #0
    137a:	f000 fb4f 	bl	1a1c <TU2_Init>
    137e:	1c02      	adds	r2, r0, #0
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:156
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
    1384:	68fb      	ldr	r3, [r7, #12]
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	2b00      	cmp	r3, #0
    138a:	d104      	bne.n	1396 <PwmLdd1_Init+0x42>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:158
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd1_ID);
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <PwmLdd1_Init+0x50>)
    138e:	2200      	movs	r2, #0
    1390:	621a      	str	r2, [r3, #32]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:161
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the PWM initialization is also unsuccessful */
    1392:	2300      	movs	r3, #0
    1394:	e000      	b.n	1398 <PwmLdd1_Init+0x44>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:163
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1396:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd1.c:164
}
    1398:	1c18      	adds	r0, r3, #0
    139a:	46bd      	mov	sp, r7
    139c:	b004      	add	sp, #16
    139e:	bd80      	pop	{r7, pc}
    13a0:	1ffff0e0 	.word	0x1ffff0e0
    13a4:	1ffff0a8 	.word	0x1ffff0a8

000013a8 <PwmLdd2_Init>:
PwmLdd2_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:145
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PwmLdd2_Init(LDD_TUserData *UserDataPtr)
{
    13a8:	b580      	push	{r7, lr}
    13aa:	b084      	sub	sp, #16
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:149
  /* Allocate device structure */
  PwmLdd2_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    13b0:	4b10      	ldr	r3, [pc, #64]	; (13f4 <PwmLdd2_Init+0x4c>)
    13b2:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:150
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	687a      	ldr	r2, [r7, #4]
    13b8:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:151
  DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	2201      	movs	r2, #1
    13be:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:152
  DeviceDataPrv->RatioStore = 0x6666U; /* Ratio after initialization */
    13c0:	68fb      	ldr	r3, [r7, #12]
    13c2:	4a0d      	ldr	r2, [pc, #52]	; (13f8 <PwmLdd2_Init+0x50>)
    13c4:	80da      	strh	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:154
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd2_ID,DeviceDataPrv);
    13c6:	4b0d      	ldr	r3, [pc, #52]	; (13fc <PwmLdd2_Init+0x54>)
    13c8:	68fa      	ldr	r2, [r7, #12]
    13ca:	625a      	str	r2, [r3, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:155
  DeviceDataPrv->LinkedDeviceDataPtr = TU2_Init((LDD_TUserData *)NULL);
    13cc:	2000      	movs	r0, #0
    13ce:	f000 fb25 	bl	1a1c <TU2_Init>
    13d2:	1c02      	adds	r2, r0, #0
    13d4:	68fb      	ldr	r3, [r7, #12]
    13d6:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:156
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
    13d8:	68fb      	ldr	r3, [r7, #12]
    13da:	681b      	ldr	r3, [r3, #0]
    13dc:	2b00      	cmp	r3, #0
    13de:	d104      	bne.n	13ea <PwmLdd2_Init+0x42>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:158
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd2_ID);
    13e0:	4b06      	ldr	r3, [pc, #24]	; (13fc <PwmLdd2_Init+0x54>)
    13e2:	2200      	movs	r2, #0
    13e4:	625a      	str	r2, [r3, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:161
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the PWM initialization is also unsuccessful */
    13e6:	2300      	movs	r3, #0
    13e8:	e000      	b.n	13ec <PwmLdd2_Init+0x44>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:163
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    13ea:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd2.c:164
}
    13ec:	1c18      	adds	r0, r3, #0
    13ee:	46bd      	mov	sp, r7
    13f0:	b004      	add	sp, #16
    13f2:	bd80      	pop	{r7, pc}
    13f4:	1ffff0ec 	.word	0x1ffff0ec
    13f8:	00006666 	.word	0x00006666
    13fc:	1ffff0a8 	.word	0x1ffff0a8

00001400 <PwmLdd3_Init>:
PwmLdd3_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:145
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PwmLdd3_Init(LDD_TUserData *UserDataPtr)
{
    1400:	b580      	push	{r7, lr}
    1402:	b084      	sub	sp, #16
    1404:	af00      	add	r7, sp, #0
    1406:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:149
  /* Allocate device structure */
  PwmLdd3_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1408:	4b10      	ldr	r3, [pc, #64]	; (144c <PwmLdd3_Init+0x4c>)
    140a:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:150
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    140c:	68fb      	ldr	r3, [r7, #12]
    140e:	687a      	ldr	r2, [r7, #4]
    1410:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:151
  DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	2201      	movs	r2, #1
    1416:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:152
  DeviceDataPrv->RatioStore = 0x01U;   /* Ratio after initialization */
    1418:	68fb      	ldr	r3, [r7, #12]
    141a:	2201      	movs	r2, #1
    141c:	80da      	strh	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:154
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd3_ID,DeviceDataPrv);
    141e:	4b0c      	ldr	r3, [pc, #48]	; (1450 <PwmLdd3_Init+0x50>)
    1420:	68fa      	ldr	r2, [r7, #12]
    1422:	629a      	str	r2, [r3, #40]	; 0x28
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:155
  DeviceDataPrv->LinkedDeviceDataPtr = TU2_Init((LDD_TUserData *)NULL);
    1424:	2000      	movs	r0, #0
    1426:	f000 faf9 	bl	1a1c <TU2_Init>
    142a:	1c02      	adds	r2, r0, #0
    142c:	68fb      	ldr	r3, [r7, #12]
    142e:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:156
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	681b      	ldr	r3, [r3, #0]
    1434:	2b00      	cmp	r3, #0
    1436:	d104      	bne.n	1442 <PwmLdd3_Init+0x42>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:158
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd3_ID);
    1438:	4b05      	ldr	r3, [pc, #20]	; (1450 <PwmLdd3_Init+0x50>)
    143a:	2200      	movs	r2, #0
    143c:	629a      	str	r2, [r3, #40]	; 0x28
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:161
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the PWM initialization is also unsuccessful */
    143e:	2300      	movs	r3, #0
    1440:	e000      	b.n	1444 <PwmLdd3_Init+0x44>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:163
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1442:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd3.c:164
}
    1444:	1c18      	adds	r0, r3, #0
    1446:	46bd      	mov	sp, r7
    1448:	b004      	add	sp, #16
    144a:	bd80      	pop	{r7, pc}
    144c:	1ffff0f8 	.word	0x1ffff0f8
    1450:	1ffff0a8 	.word	0x1ffff0a8

00001454 <PwmLdd4_Init>:
PwmLdd4_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:145
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PwmLdd4_Init(LDD_TUserData *UserDataPtr)
{
    1454:	b580      	push	{r7, lr}
    1456:	b084      	sub	sp, #16
    1458:	af00      	add	r7, sp, #0
    145a:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:149
  /* Allocate device structure */
  PwmLdd4_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    145c:	4b10      	ldr	r3, [pc, #64]	; (14a0 <PwmLdd4_Init+0x4c>)
    145e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:150
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1460:	68fb      	ldr	r3, [r7, #12]
    1462:	687a      	ldr	r2, [r7, #4]
    1464:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:151
  DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
    1466:	68fb      	ldr	r3, [r7, #12]
    1468:	2201      	movs	r2, #1
    146a:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:152
  DeviceDataPrv->RatioStore = 0x6666U; /* Ratio after initialization */
    146c:	68fb      	ldr	r3, [r7, #12]
    146e:	4a0d      	ldr	r2, [pc, #52]	; (14a4 <PwmLdd4_Init+0x50>)
    1470:	80da      	strh	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:154
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd4_ID,DeviceDataPrv);
    1472:	4b0d      	ldr	r3, [pc, #52]	; (14a8 <PwmLdd4_Init+0x54>)
    1474:	68fa      	ldr	r2, [r7, #12]
    1476:	62da      	str	r2, [r3, #44]	; 0x2c
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:155
  DeviceDataPrv->LinkedDeviceDataPtr = TU2_Init((LDD_TUserData *)NULL);
    1478:	2000      	movs	r0, #0
    147a:	f000 facf 	bl	1a1c <TU2_Init>
    147e:	1c02      	adds	r2, r0, #0
    1480:	68fb      	ldr	r3, [r7, #12]
    1482:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:156
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	681b      	ldr	r3, [r3, #0]
    1488:	2b00      	cmp	r3, #0
    148a:	d104      	bne.n	1496 <PwmLdd4_Init+0x42>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:158
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd4_ID);
    148c:	4b06      	ldr	r3, [pc, #24]	; (14a8 <PwmLdd4_Init+0x54>)
    148e:	2200      	movs	r2, #0
    1490:	62da      	str	r2, [r3, #44]	; 0x2c
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:161
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the PWM initialization is also unsuccessful */
    1492:	2300      	movs	r3, #0
    1494:	e000      	b.n	1498 <PwmLdd4_Init+0x44>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:163
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1496:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd4.c:164
}
    1498:	1c18      	adds	r0, r3, #0
    149a:	46bd      	mov	sp, r7
    149c:	b004      	add	sp, #16
    149e:	bd80      	pop	{r7, pc}
    14a0:	1ffff104 	.word	0x1ffff104
    14a4:	00006666 	.word	0x00006666
    14a8:	1ffff0a8 	.word	0x1ffff0a8

000014ac <PwmLdd5_Init>:
PwmLdd5_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:145
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* PwmLdd5_Init(LDD_TUserData *UserDataPtr)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b084      	sub	sp, #16
    14b0:	af00      	add	r7, sp, #0
    14b2:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:149
  /* Allocate device structure */
  PwmLdd5_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    14b4:	4b10      	ldr	r3, [pc, #64]	; (14f8 <PwmLdd5_Init+0x4c>)
    14b6:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:150
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    14b8:	68fb      	ldr	r3, [r7, #12]
    14ba:	687a      	ldr	r2, [r7, #4]
    14bc:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:151
  DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
    14be:	68fb      	ldr	r3, [r7, #12]
    14c0:	2201      	movs	r2, #1
    14c2:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:152
  DeviceDataPrv->RatioStore = 0xED6FU; /* Ratio after initialization */
    14c4:	68fb      	ldr	r3, [r7, #12]
    14c6:	4a0d      	ldr	r2, [pc, #52]	; (14fc <PwmLdd5_Init+0x50>)
    14c8:	80da      	strh	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:154
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd5_ID,DeviceDataPrv);
    14ca:	4b0d      	ldr	r3, [pc, #52]	; (1500 <PwmLdd5_Init+0x54>)
    14cc:	68fa      	ldr	r2, [r7, #12]
    14ce:	635a      	str	r2, [r3, #52]	; 0x34
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:155
  DeviceDataPrv->LinkedDeviceDataPtr = TU3_Init((LDD_TUserData *)NULL);
    14d0:	2000      	movs	r0, #0
    14d2:	f000 fb3f 	bl	1b54 <TU3_Init>
    14d6:	1c02      	adds	r2, r0, #0
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:156
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	681b      	ldr	r3, [r3, #0]
    14e0:	2b00      	cmp	r3, #0
    14e2:	d104      	bne.n	14ee <PwmLdd5_Init+0x42>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:158
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd5_ID);
    14e4:	4b06      	ldr	r3, [pc, #24]	; (1500 <PwmLdd5_Init+0x54>)
    14e6:	2200      	movs	r2, #0
    14e8:	635a      	str	r2, [r3, #52]	; 0x34
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:161
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the PWM initialization is also unsuccessful */
    14ea:	2300      	movs	r3, #0
    14ec:	e000      	b.n	14f0 <PwmLdd5_Init+0x44>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:163
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    14ee:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/PwmLdd5.c:164
}
    14f0:	1c18      	adds	r0, r3, #0
    14f2:	46bd      	mov	sp, r7
    14f4:	b004      	add	sp, #16
    14f6:	bd80      	pop	{r7, pc}
    14f8:	1ffff110 	.word	0x1ffff110
    14fc:	ffffed6f 	.word	0xffffed6f
    1500:	1ffff0a8 	.word	0x1ffff0a8

00001504 <SerialCom_Init>:
SerialCom_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:160
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* SerialCom_Init(LDD_TUserData *UserDataPtr)
{
    1504:	b580      	push	{r7, lr}
    1506:	b084      	sub	sp, #16
    1508:	af00      	add	r7, sp, #0
    150a:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:164
  /* Allocate device structure */
  SerialCom_TDeviceDataPtr DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    150c:	4b5e      	ldr	r3, [pc, #376]	; (1688 <SerialCom_Init+0x184>)
    150e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:167

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	2200      	movs	r2, #0
    1514:	805a      	strh	r2, [r3, #2]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:168
  DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlock() */
    1516:	68fb      	ldr	r3, [r7, #12]
    1518:	2200      	movs	r2, #0
    151a:	811a      	strh	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:169
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
    151c:	68fb      	ldr	r3, [r7, #12]
    151e:	2200      	movs	r2, #0
    1520:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:171
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
    1522:	68fb      	ldr	r3, [r7, #12]
    1524:	2200      	movs	r2, #0
    1526:	815a      	strh	r2, [r3, #10]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:172
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    1528:	68fb      	ldr	r3, [r7, #12]
    152a:	2200      	movs	r2, #0
    152c:	821a      	strh	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:173
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
    152e:	68fb      	ldr	r3, [r7, #12]
    1530:	2200      	movs	r2, #0
    1532:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:174
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1534:	68fb      	ldr	r3, [r7, #12]
    1536:	687a      	ldr	r2, [r7, #4]
    1538:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:177
  /* Allocate interrupt vectors */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_UART0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    153a:	4b54      	ldr	r3, [pc, #336]	; (168c <SerialCom_Init+0x188>)
    153c:	68fa      	ldr	r2, [r7, #12]
    153e:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:179
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
    1540:	4a53      	ldr	r2, [pc, #332]	; (1690 <SerialCom_Init+0x18c>)
    1542:	4953      	ldr	r1, [pc, #332]	; (1690 <SerialCom_Init+0x18c>)
    1544:	4b53      	ldr	r3, [pc, #332]	; (1694 <SerialCom_Init+0x190>)
    1546:	58cb      	ldr	r3, [r1, r3]
    1548:	2180      	movs	r1, #128	; 0x80
    154a:	00c9      	lsls	r1, r1, #3
    154c:	4319      	orrs	r1, r3
    154e:	4b51      	ldr	r3, [pc, #324]	; (1694 <SerialCom_Init+0x190>)
    1550:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:181
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
    1552:	4b51      	ldr	r3, [pc, #324]	; (1698 <SerialCom_Init+0x194>)
    1554:	4a50      	ldr	r2, [pc, #320]	; (1698 <SerialCom_Init+0x194>)
    1556:	6851      	ldr	r1, [r2, #4]
    1558:	4a50      	ldr	r2, [pc, #320]	; (169c <SerialCom_Init+0x198>)
    155a:	400a      	ands	r2, r1
    155c:	2180      	movs	r1, #128	; 0x80
    155e:	0089      	lsls	r1, r1, #2
    1560:	430a      	orrs	r2, r1
    1562:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:188
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
    1564:	4b4c      	ldr	r3, [pc, #304]	; (1698 <SerialCom_Init+0x194>)
    1566:	4a4c      	ldr	r2, [pc, #304]	; (1698 <SerialCom_Init+0x194>)
    1568:	6891      	ldr	r1, [r2, #8]
    156a:	4a4c      	ldr	r2, [pc, #304]	; (169c <SerialCom_Init+0x198>)
    156c:	400a      	ands	r2, r1
    156e:	2180      	movs	r1, #128	; 0x80
    1570:	0089      	lsls	r1, r1, #2
    1572:	430a      	orrs	r2, r1
    1574:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:195
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR3: PRI_12=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
    1576:	4a4a      	ldr	r2, [pc, #296]	; (16a0 <SerialCom_Init+0x19c>)
    1578:	4949      	ldr	r1, [pc, #292]	; (16a0 <SerialCom_Init+0x19c>)
    157a:	23c3      	movs	r3, #195	; 0xc3
    157c:	009b      	lsls	r3, r3, #2
    157e:	58cb      	ldr	r3, [r1, r3]
    1580:	21c0      	movs	r1, #192	; 0xc0
    1582:	1c18      	adds	r0, r3, #0
    1584:	4388      	bics	r0, r1
    1586:	1c01      	adds	r1, r0, #0
    1588:	23c3      	movs	r3, #195	; 0xc3
    158a:	009b      	lsls	r3, r3, #2
    158c:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:201
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
    158e:	4b44      	ldr	r3, [pc, #272]	; (16a0 <SerialCom_Init+0x19c>)
    1590:	4a43      	ldr	r2, [pc, #268]	; (16a0 <SerialCom_Init+0x19c>)
    1592:	6812      	ldr	r2, [r2, #0]
    1594:	2180      	movs	r1, #128	; 0x80
    1596:	0149      	lsls	r1, r1, #5
    1598:	430a      	orrs	r2, r1
    159a:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:202
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
    159c:	4b41      	ldr	r3, [pc, #260]	; (16a4 <SerialCom_Init+0x1a0>)
    159e:	4a41      	ldr	r2, [pc, #260]	; (16a4 <SerialCom_Init+0x1a0>)
    15a0:	78d2      	ldrb	r2, [r2, #3]
    15a2:	b2d2      	uxtb	r2, r2
    15a4:	2108      	movs	r1, #8
    15a6:	438a      	bics	r2, r1
    15a8:	b2d2      	uxtb	r2, r2
    15aa:	70da      	strb	r2, [r3, #3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:203
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
    15ac:	4b3d      	ldr	r3, [pc, #244]	; (16a4 <SerialCom_Init+0x1a0>)
    15ae:	4a3d      	ldr	r2, [pc, #244]	; (16a4 <SerialCom_Init+0x1a0>)
    15b0:	78d2      	ldrb	r2, [r2, #3]
    15b2:	b2d2      	uxtb	r2, r2
    15b4:	2104      	movs	r1, #4
    15b6:	438a      	bics	r2, r1
    15b8:	b2d2      	uxtb	r2, r2
    15ba:	70da      	strb	r2, [r3, #3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:204
  DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
    15bc:	68fb      	ldr	r3, [r7, #12]
    15be:	2200      	movs	r2, #0
    15c0:	801a      	strh	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:206
  /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
  UART0_C1 = 0x00U;                    /*  Set the C1 register */
    15c2:	4b38      	ldr	r3, [pc, #224]	; (16a4 <SerialCom_Init+0x1a0>)
    15c4:	2200      	movs	r2, #0
    15c6:	709a      	strb	r2, [r3, #2]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:208
  /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
    15c8:	4b36      	ldr	r3, [pc, #216]	; (16a4 <SerialCom_Init+0x1a0>)
    15ca:	2200      	movs	r2, #0
    15cc:	719a      	strb	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:210
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
    15ce:	4b35      	ldr	r3, [pc, #212]	; (16a4 <SerialCom_Init+0x1a0>)
    15d0:	2200      	movs	r2, #0
    15d2:	729a      	strb	r2, [r3, #10]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:212
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
    15d4:	4b33      	ldr	r3, [pc, #204]	; (16a4 <SerialCom_Init+0x1a0>)
    15d6:	2200      	movs	r2, #0
    15d8:	715a      	strb	r2, [r3, #5]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:213
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
    15da:	4a2d      	ldr	r2, [pc, #180]	; (1690 <SerialCom_Init+0x18c>)
    15dc:	492c      	ldr	r1, [pc, #176]	; (1690 <SerialCom_Init+0x18c>)
    15de:	4b32      	ldr	r3, [pc, #200]	; (16a8 <SerialCom_Init+0x1a4>)
    15e0:	58c9      	ldr	r1, [r1, r3]
    15e2:	4b32      	ldr	r3, [pc, #200]	; (16ac <SerialCom_Init+0x1a8>)
    15e4:	400b      	ands	r3, r1
    15e6:	2180      	movs	r1, #128	; 0x80
    15e8:	04c9      	lsls	r1, r1, #19
    15ea:	4319      	orrs	r1, r3
    15ec:	4b2e      	ldr	r3, [pc, #184]	; (16a8 <SerialCom_Init+0x1a4>)
    15ee:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:214
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 46U); /* Set the baud rate register. */
    15f0:	4b2c      	ldr	r3, [pc, #176]	; (16a4 <SerialCom_Init+0x1a0>)
    15f2:	4a2c      	ldr	r2, [pc, #176]	; (16a4 <SerialCom_Init+0x1a0>)
    15f4:	7812      	ldrb	r2, [r2, #0]
    15f6:	b2d2      	uxtb	r2, r2
    15f8:	211f      	movs	r1, #31
    15fa:	438a      	bics	r2, r1
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	701a      	strb	r2, [r3, #0]
    1600:	4b28      	ldr	r3, [pc, #160]	; (16a4 <SerialCom_Init+0x1a0>)
    1602:	222e      	movs	r2, #46	; 0x2e
    1604:	705a      	strb	r2, [r3, #1]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:215
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
    1606:	4b27      	ldr	r3, [pc, #156]	; (16a4 <SerialCom_Init+0x1a0>)
    1608:	4a26      	ldr	r2, [pc, #152]	; (16a4 <SerialCom_Init+0x1a0>)
    160a:	7a92      	ldrb	r2, [r2, #10]
    160c:	b2d2      	uxtb	r2, r2
    160e:	b2d2      	uxtb	r2, r2
    1610:	211f      	movs	r1, #31
    1612:	438a      	bics	r2, r1
    1614:	b2d2      	uxtb	r2, r2
    1616:	2103      	movs	r1, #3
    1618:	430a      	orrs	r2, r1
    161a:	b2d2      	uxtb	r2, r2
    161c:	b2d2      	uxtb	r2, r2
    161e:	729a      	strb	r2, [r3, #10]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:216
  UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
    1620:	4b20      	ldr	r3, [pc, #128]	; (16a4 <SerialCom_Init+0x1a0>)
    1622:	4a20      	ldr	r2, [pc, #128]	; (16a4 <SerialCom_Init+0x1a0>)
    1624:	7ad2      	ldrb	r2, [r2, #11]
    1626:	b2d2      	uxtb	r2, r2
    1628:	b2d2      	uxtb	r2, r2
    162a:	2102      	movs	r1, #2
    162c:	430a      	orrs	r2, r1
    162e:	b2d2      	uxtb	r2, r2
    1630:	b2d2      	uxtb	r2, r2
    1632:	72da      	strb	r2, [r3, #11]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:217
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
    1634:	4b1b      	ldr	r3, [pc, #108]	; (16a4 <SerialCom_Init+0x1a0>)
    1636:	4a1b      	ldr	r2, [pc, #108]	; (16a4 <SerialCom_Init+0x1a0>)
    1638:	78d2      	ldrb	r2, [r2, #3]
    163a:	b2d2      	uxtb	r2, r2
    163c:	b2d2      	uxtb	r2, r2
    163e:	2108      	movs	r1, #8
    1640:	430a      	orrs	r2, r1
    1642:	b2d2      	uxtb	r2, r2
    1644:	b2d2      	uxtb	r2, r2
    1646:	70da      	strb	r2, [r3, #3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:218
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
    1648:	4b16      	ldr	r3, [pc, #88]	; (16a4 <SerialCom_Init+0x1a0>)
    164a:	4a16      	ldr	r2, [pc, #88]	; (16a4 <SerialCom_Init+0x1a0>)
    164c:	78d2      	ldrb	r2, [r2, #3]
    164e:	b2d2      	uxtb	r2, r2
    1650:	b2d2      	uxtb	r2, r2
    1652:	2104      	movs	r1, #4
    1654:	430a      	orrs	r2, r1
    1656:	b2d2      	uxtb	r2, r2
    1658:	b2d2      	uxtb	r2, r2
    165a:	70da      	strb	r2, [r3, #3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:219
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts */
    165c:	4b11      	ldr	r3, [pc, #68]	; (16a4 <SerialCom_Init+0x1a0>)
    165e:	4a11      	ldr	r2, [pc, #68]	; (16a4 <SerialCom_Init+0x1a0>)
    1660:	78d2      	ldrb	r2, [r2, #3]
    1662:	b2d2      	uxtb	r2, r2
    1664:	2120      	movs	r1, #32
    1666:	430a      	orrs	r2, r1
    1668:	b2d2      	uxtb	r2, r2
    166a:	70da      	strb	r2, [r3, #3]
    166c:	4b0d      	ldr	r3, [pc, #52]	; (16a4 <SerialCom_Init+0x1a0>)
    166e:	4a0d      	ldr	r2, [pc, #52]	; (16a4 <SerialCom_Init+0x1a0>)
    1670:	7992      	ldrb	r2, [r2, #6]
    1672:	b2d2      	uxtb	r2, r2
    1674:	719a      	strb	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:221
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SerialCom_ID,DeviceDataPrv);
    1676:	4b0e      	ldr	r3, [pc, #56]	; (16b0 <SerialCom_Init+0x1ac>)
    1678:	68fa      	ldr	r2, [r7, #12]
    167a:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:222
  return ((LDD_TDeviceData *)DeviceDataPrv);
    167c:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:223
}
    167e:	1c18      	adds	r0, r3, #0
    1680:	46bd      	mov	sp, r7
    1682:	b004      	add	sp, #16
    1684:	bd80      	pop	{r7, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	1ffff11c 	.word	0x1ffff11c
    168c:	1ffff134 	.word	0x1ffff134
    1690:	40047000 	.word	0x40047000
    1694:	00001034 	.word	0x00001034
    1698:	40049000 	.word	0x40049000
    169c:	fefff8ff 	.word	0xfefff8ff
    16a0:	e000e100 	.word	0xe000e100
    16a4:	4006a000 	.word	0x4006a000
    16a8:	00001004 	.word	0x00001004
    16ac:	f3ffffff 	.word	0xf3ffffff
    16b0:	1ffff0a8 	.word	0x1ffff0a8

000016b4 <SerialCom_SendBlock>:
SerialCom_SendBlock():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:330
**                           ERR_BUSY - The previous transmit request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError SerialCom_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
    16b4:	b580      	push	{r7, lr}
    16b6:	b086      	sub	sp, #24
    16b8:	af00      	add	r7, sp, #0
    16ba:	60f8      	str	r0, [r7, #12]
    16bc:	60b9      	str	r1, [r7, #8]
    16be:	1dbb      	adds	r3, r7, #6
    16c0:	801a      	strh	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:331
  SerialCom_TDeviceDataPtr DeviceDataPrv = (SerialCom_TDeviceDataPtr)DeviceDataPtr;
    16c2:	68fb      	ldr	r3, [r7, #12]
    16c4:	617b      	str	r3, [r7, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:333

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    16c6:	1dbb      	adds	r3, r7, #6
    16c8:	881b      	ldrh	r3, [r3, #0]
    16ca:	2b00      	cmp	r3, #0
    16cc:	d101      	bne.n	16d2 <SerialCom_SendBlock+0x1e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:334
    return ERR_PARAM_SIZE;             /* If no then error */
    16ce:	2384      	movs	r3, #132	; 0x84
    16d0:	e048      	b.n	1764 <SerialCom_SendBlock+0xb0>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:336
  }
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
    16d2:	697b      	ldr	r3, [r7, #20]
    16d4:	8a1b      	ldrh	r3, [r3, #16]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d001      	beq.n	16de <SerialCom_SendBlock+0x2a>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:337
    return ERR_BUSY;                   /* If yes then error */
    16da:	2308      	movs	r3, #8
    16dc:	e042      	b.n	1764 <SerialCom_SendBlock+0xb0>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:340
  }
  /* {Default RTOS Adapter} Critical section begin, general PE function is used */
  EnterCritical();
    16de:	1c3b      	adds	r3, r7, #0
    16e0:	3313      	adds	r3, #19
    16e2:	f3ef 8010 	mrs	r0, PRIMASK
    16e6:	b672      	cpsid	i
    16e8:	7018      	strb	r0, [r3, #0]
    16ea:	4b20      	ldr	r3, [pc, #128]	; (176c <SerialCom_SendBlock+0xb8>)
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	b2db      	uxtb	r3, r3
    16f0:	3301      	adds	r3, #1
    16f2:	b2db      	uxtb	r3, r3
    16f4:	4a1d      	ldr	r2, [pc, #116]	; (176c <SerialCom_SendBlock+0xb8>)
    16f6:	1c19      	adds	r1, r3, #0
    16f8:	7011      	strb	r1, [r2, #0]
    16fa:	2b01      	cmp	r3, #1
    16fc:	d104      	bne.n	1708 <SerialCom_SendBlock+0x54>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:340 (discriminator 1)
    16fe:	1c3b      	adds	r3, r7, #0
    1700:	3313      	adds	r3, #19
    1702:	781a      	ldrb	r2, [r3, #0]
    1704:	4b1a      	ldr	r3, [pc, #104]	; (1770 <SerialCom_SendBlock+0xbc>)
    1706:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:341
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
    1708:	697b      	ldr	r3, [r7, #20]
    170a:	68ba      	ldr	r2, [r7, #8]
    170c:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:342
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
    170e:	697b      	ldr	r3, [r7, #20]
    1710:	1dba      	adds	r2, r7, #6
    1712:	8812      	ldrh	r2, [r2, #0]
    1714:	821a      	strh	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:343
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
    1716:	697b      	ldr	r3, [r7, #20]
    1718:	2200      	movs	r2, #0
    171a:	815a      	strh	r2, [r3, #10]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:344
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
    171c:	697b      	ldr	r3, [r7, #20]
    171e:	881b      	ldrh	r3, [r3, #0]
    1720:	2201      	movs	r2, #1
    1722:	4313      	orrs	r3, r2
    1724:	b29a      	uxth	r2, r3
    1726:	697b      	ldr	r3, [r7, #20]
    1728:	801a      	strh	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:345
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
    172a:	4b12      	ldr	r3, [pc, #72]	; (1774 <SerialCom_SendBlock+0xc0>)
    172c:	4a11      	ldr	r2, [pc, #68]	; (1774 <SerialCom_SendBlock+0xc0>)
    172e:	78d2      	ldrb	r2, [r2, #3]
    1730:	b2d2      	uxtb	r2, r2
    1732:	2180      	movs	r1, #128	; 0x80
    1734:	4249      	negs	r1, r1
    1736:	430a      	orrs	r2, r1
    1738:	b2d2      	uxtb	r2, r2
    173a:	70da      	strb	r2, [r3, #3]
    173c:	4b0d      	ldr	r3, [pc, #52]	; (1774 <SerialCom_SendBlock+0xc0>)
    173e:	4a0d      	ldr	r2, [pc, #52]	; (1774 <SerialCom_SendBlock+0xc0>)
    1740:	7992      	ldrb	r2, [r2, #6]
    1742:	b2d2      	uxtb	r2, r2
    1744:	719a      	strb	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:347
  /* {Default RTOS Adapter} Critical section end, general PE function is used */
  ExitCritical();
    1746:	4b09      	ldr	r3, [pc, #36]	; (176c <SerialCom_SendBlock+0xb8>)
    1748:	781b      	ldrb	r3, [r3, #0]
    174a:	b2db      	uxtb	r3, r3
    174c:	3b01      	subs	r3, #1
    174e:	b2db      	uxtb	r3, r3
    1750:	4a06      	ldr	r2, [pc, #24]	; (176c <SerialCom_SendBlock+0xb8>)
    1752:	1c19      	adds	r1, r3, #0
    1754:	7011      	strb	r1, [r2, #0]
    1756:	2b00      	cmp	r3, #0
    1758:	d103      	bne.n	1762 <SerialCom_SendBlock+0xae>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:347 (discriminator 1)
    175a:	4b05      	ldr	r3, [pc, #20]	; (1770 <SerialCom_SendBlock+0xbc>)
    175c:	7818      	ldrb	r0, [r3, #0]
    175e:	f380 8810 	msr	PRIMASK, r0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:348
  return ERR_OK;                       /* OK */
    1762:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:349
}
    1764:	1c18      	adds	r0, r3, #0
    1766:	46bd      	mov	sp, r7
    1768:	b006      	add	sp, #24
    176a:	bd80      	pop	{r7, pc}
    176c:	1ffff09c 	.word	0x1ffff09c
    1770:	1ffff274 	.word	0x1ffff274
    1774:	4006a000 	.word	0x4006a000

00001778 <InterruptRx>:
InterruptRx():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:362
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptRx(SerialCom_TDeviceDataPtr DeviceDataPrv)
{
    1778:	b590      	push	{r4, r7, lr}
    177a:	b083      	sub	sp, #12
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:365
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
    1780:	4b12      	ldr	r3, [pc, #72]	; (17cc <InterruptRx+0x54>)
    1782:	79db      	ldrb	r3, [r3, #7]
    1784:	b2db      	uxtb	r3, r3
    1786:	1c1c      	adds	r4, r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:366
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    1788:	687b      	ldr	r3, [r7, #4]
    178a:	891b      	ldrh	r3, [r3, #8]
    178c:	2b00      	cmp	r3, #0
    178e:	d01a      	beq.n	17c6 <InterruptRx+0x4e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:367
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    1790:	687b      	ldr	r3, [r7, #4]
    1792:	685b      	ldr	r3, [r3, #4]
    1794:	1c59      	adds	r1, r3, #1
    1796:	687a      	ldr	r2, [r7, #4]
    1798:	6051      	str	r1, [r2, #4]
    179a:	b2e2      	uxtb	r2, r4
    179c:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:368
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	885b      	ldrh	r3, [r3, #2]
    17a2:	3301      	adds	r3, #1
    17a4:	b29a      	uxth	r2, r3
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	805a      	strh	r2, [r3, #2]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:369
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
    17aa:	687b      	ldr	r3, [r7, #4]
    17ac:	885a      	ldrh	r2, [r3, #2]
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	891b      	ldrh	r3, [r3, #8]
    17b2:	429a      	cmp	r2, r3
    17b4:	d107      	bne.n	17c6 <InterruptRx+0x4e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:370
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
    17b6:	687b      	ldr	r3, [r7, #4]
    17b8:	2200      	movs	r2, #0
    17ba:	811a      	strh	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:371
      SerialCom_OnBlockReceived(DeviceDataPrv->UserDataPtr);
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	695b      	ldr	r3, [r3, #20]
    17c0:	1c18      	adds	r0, r3, #0
    17c2:	f7ff f833 	bl	82c <SerialCom_OnBlockReceived>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:374
    }
  }
}
    17c6:	46bd      	mov	sp, r7
    17c8:	b003      	add	sp, #12
    17ca:	bd90      	pop	{r4, r7, pc}
    17cc:	4006a000 	.word	0x4006a000

000017d0 <InterruptTx>:
InterruptTx():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:387
**         peripheral(s) and eventually invokes the bean's event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void InterruptTx(SerialCom_TDeviceDataPtr DeviceDataPrv)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b082      	sub	sp, #8
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:389

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	895a      	ldrh	r2, [r3, #10]
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	8a1b      	ldrh	r3, [r3, #16]
    17e0:	429a      	cmp	r2, r3
    17e2:	d21c      	bcs.n	181e <InterruptTx+0x4e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:390
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    17e4:	4919      	ldr	r1, [pc, #100]	; (184c <InterruptTx+0x7c>)
    17e6:	687b      	ldr	r3, [r7, #4]
    17e8:	68db      	ldr	r3, [r3, #12]
    17ea:	1c58      	adds	r0, r3, #1
    17ec:	687a      	ldr	r2, [r7, #4]
    17ee:	60d0      	str	r0, [r2, #12]
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	71cb      	strb	r3, [r1, #7]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:391
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	895b      	ldrh	r3, [r3, #10]
    17f8:	3301      	adds	r3, #1
    17fa:	b29a      	uxth	r2, r3
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	815a      	strh	r2, [r3, #10]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:392
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	895a      	ldrh	r2, [r3, #10]
    1804:	687b      	ldr	r3, [r7, #4]
    1806:	8a1b      	ldrh	r3, [r3, #16]
    1808:	429a      	cmp	r2, r3
    180a:	d11c      	bne.n	1846 <InterruptTx+0x76>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:393
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	2200      	movs	r2, #0
    1810:	821a      	strh	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:394
      SerialCom_OnBlockSent(DeviceDataPrv->UserDataPtr);
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	695b      	ldr	r3, [r3, #20]
    1816:	1c18      	adds	r0, r3, #0
    1818:	f7ff f810 	bl	83c <SerialCom_OnBlockSent>
    181c:	e013      	b.n	1846 <InterruptTx+0x76>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:397
    }
  } else {
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interrupt */
    181e:	4b0b      	ldr	r3, [pc, #44]	; (184c <InterruptTx+0x7c>)
    1820:	4a0a      	ldr	r2, [pc, #40]	; (184c <InterruptTx+0x7c>)
    1822:	78d2      	ldrb	r2, [r2, #3]
    1824:	b2d1      	uxtb	r1, r2
    1826:	227f      	movs	r2, #127	; 0x7f
    1828:	400a      	ands	r2, r1
    182a:	b2d2      	uxtb	r2, r2
    182c:	70da      	strb	r2, [r3, #3]
    182e:	4b07      	ldr	r3, [pc, #28]	; (184c <InterruptTx+0x7c>)
    1830:	4a06      	ldr	r2, [pc, #24]	; (184c <InterruptTx+0x7c>)
    1832:	7992      	ldrb	r2, [r2, #6]
    1834:	b2d2      	uxtb	r2, r2
    1836:	719a      	strb	r2, [r3, #6]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:398
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_INT */
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	881b      	ldrh	r3, [r3, #0]
    183c:	2201      	movs	r2, #1
    183e:	4393      	bics	r3, r2
    1840:	b29a      	uxth	r2, r3
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	801a      	strh	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:400
  }
}
    1846:	46bd      	mov	sp, r7
    1848:	b002      	add	sp, #8
    184a:	bd80      	pop	{r7, pc}
    184c:	4006a000 	.word	0x4006a000

00001850 <SerialCom_Interrupt>:
SerialCom_Interrupt():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:413
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(SerialCom_Interrupt)
{
    1850:	b590      	push	{r4, r7, lr}
    1852:	b083      	sub	sp, #12
    1854:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:415
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  SerialCom_TDeviceDataPtr DeviceDataPrv = INT_UART0__DEFAULT_RTOS_ISRPARAM;
    1856:	4b15      	ldr	r3, [pc, #84]	; (18ac <SerialCom_Interrupt+0x5c>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	607b      	str	r3, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:416
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
    185c:	4b14      	ldr	r3, [pc, #80]	; (18b0 <SerialCom_Interrupt+0x60>)
    185e:	791b      	ldrb	r3, [r3, #4]
    1860:	b2db      	uxtb	r3, r3
    1862:	1c1c      	adds	r4, r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:418

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
    1864:	230f      	movs	r3, #15
    1866:	4023      	ands	r3, r4
    1868:	d009      	beq.n	187e <SerialCom_Interrupt+0x2e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:419
    UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK));
    186a:	4b11      	ldr	r3, [pc, #68]	; (18b0 <SerialCom_Interrupt+0x60>)
    186c:	220f      	movs	r2, #15
    186e:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:420
    (void)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Dummy read 8-bit character from receiver */
    1870:	4b0f      	ldr	r3, [pc, #60]	; (18b0 <SerialCom_Interrupt+0x60>)
    1872:	79db      	ldrb	r3, [r3, #7]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:421
    StatReg &= (uint32_t)(~(uint32_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard the errorneous data */
    1874:	2320      	movs	r3, #32
    1876:	1c22      	adds	r2, r4, #0
    1878:	439a      	bics	r2, r3
    187a:	1c13      	adds	r3, r2, #0
    187c:	1c1c      	adds	r4, r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:423
  }
  if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
    187e:	2320      	movs	r3, #32
    1880:	4023      	ands	r3, r4
    1882:	d003      	beq.n	188c <SerialCom_Interrupt+0x3c>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:424
    InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This routine is inlined. */
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	1c18      	adds	r0, r3, #0
    1888:	f7ff ff76 	bl	1778 <InterruptRx>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:426
  }
  if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	881b      	ldrh	r3, [r3, #0]
    1890:	1c1a      	adds	r2, r3, #0
    1892:	2301      	movs	r3, #1
    1894:	4013      	ands	r3, r2
    1896:	d006      	beq.n	18a6 <SerialCom_Interrupt+0x56>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:427
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
    1898:	2380      	movs	r3, #128	; 0x80
    189a:	4023      	ands	r3, r4
    189c:	d003      	beq.n	18a6 <SerialCom_Interrupt+0x56>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:428
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	1c18      	adds	r0, r3, #0
    18a2:	f7ff ff95 	bl	17d0 <InterruptTx>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/SerialCom.c:431
    }
  }
}
    18a6:	46bd      	mov	sp, r7
    18a8:	b003      	add	sp, #12
    18aa:	bd90      	pop	{r4, r7, pc}
    18ac:	1ffff134 	.word	0x1ffff134
    18b0:	4006a000 	.word	0x4006a000

000018b4 <TU1_Init>:
TU1_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:153
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr)
{
    18b4:	b580      	push	{r7, lr}
    18b6:	b084      	sub	sp, #16
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:156
  TU1_TDeviceData *DeviceDataPrv;

  if (PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID] == NULL) {
    18bc:	4b2a      	ldr	r3, [pc, #168]	; (1968 <TU1_Init+0xb4>)
    18be:	689b      	ldr	r3, [r3, #8]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d140      	bne.n	1946 <TU1_Init+0x92>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:159
    /* Allocate device structure */
    /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
    DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    18c4:	4b29      	ldr	r3, [pc, #164]	; (196c <TU1_Init+0xb8>)
    18c6:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:160
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    18c8:	68fb      	ldr	r3, [r7, #12]
    18ca:	687a      	ldr	r2, [r7, #4]
    18cc:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:161
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
    18ce:	68fb      	ldr	r3, [r7, #12]
    18d0:	2201      	movs	r2, #1
    18d2:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:172
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  }
  /* Interrupt vector(s) allocation */
  /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the global variable */
  INT_PIT__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
    18d4:	4b26      	ldr	r3, [pc, #152]	; (1970 <TU1_Init+0xbc>)
    18d6:	68fa      	ldr	r2, [r7, #12]
    18d8:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:174
  /* SIM_SCGC6: PIT=1 */
  SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;
    18da:	4a26      	ldr	r2, [pc, #152]	; (1974 <TU1_Init+0xc0>)
    18dc:	4925      	ldr	r1, [pc, #148]	; (1974 <TU1_Init+0xc0>)
    18de:	4b26      	ldr	r3, [pc, #152]	; (1978 <TU1_Init+0xc4>)
    18e0:	58cb      	ldr	r3, [r1, r3]
    18e2:	2180      	movs	r1, #128	; 0x80
    18e4:	0409      	lsls	r1, r1, #16
    18e6:	4319      	orrs	r1, r3
    18e8:	4b23      	ldr	r3, [pc, #140]	; (1978 <TU1_Init+0xc4>)
    18ea:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:176
  /* PIT_MCR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MDIS=0,FRZ=0 */
  PIT_MCR = 0x00U;                     /* Enable device clock */
    18ec:	4b23      	ldr	r3, [pc, #140]	; (197c <TU1_Init+0xc8>)
    18ee:	2200      	movs	r2, #0
    18f0:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:178
  /* PIT_TCTRL0: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHN=0,TIE=0,TEN=0 */
  PIT_TCTRL0 = 0x00U;                  /* Clear control register */
    18f2:	4a22      	ldr	r2, [pc, #136]	; (197c <TU1_Init+0xc8>)
    18f4:	2384      	movs	r3, #132	; 0x84
    18f6:	005b      	lsls	r3, r3, #1
    18f8:	2100      	movs	r1, #0
    18fa:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:180
  /* PIT_TFLG0: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TIF=1 */
  PIT_TFLG0 = PIT_TFLG_TIF_MASK;       /* Clear timer flag register */
    18fc:	4a1f      	ldr	r2, [pc, #124]	; (197c <TU1_Init+0xc8>)
    18fe:	2386      	movs	r3, #134	; 0x86
    1900:	005b      	lsls	r3, r3, #1
    1902:	2101      	movs	r1, #1
    1904:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:182
  /* PIT_LDVAL0: TSV=0xD1 */
  PIT_LDVAL0 = PIT_LDVAL_TSV(0xD1);    /* Set up load register */
    1906:	4a1d      	ldr	r2, [pc, #116]	; (197c <TU1_Init+0xc8>)
    1908:	2380      	movs	r3, #128	; 0x80
    190a:	005b      	lsls	r3, r3, #1
    190c:	21d1      	movs	r1, #209	; 0xd1
    190e:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:184
  /* NVIC_IPR5: PRI_22=0x80 */
  NVIC_IPR5 = (uint32_t)((NVIC_IPR5 & (uint32_t)~(uint32_t)(
    1910:	4a1b      	ldr	r2, [pc, #108]	; (1980 <TU1_Init+0xcc>)
    1912:	491b      	ldr	r1, [pc, #108]	; (1980 <TU1_Init+0xcc>)
    1914:	23c5      	movs	r3, #197	; 0xc5
    1916:	009b      	lsls	r3, r3, #2
    1918:	58c9      	ldr	r1, [r1, r3]
    191a:	4b1a      	ldr	r3, [pc, #104]	; (1984 <TU1_Init+0xd0>)
    191c:	4019      	ands	r1, r3
    191e:	23c5      	movs	r3, #197	; 0xc5
    1920:	009b      	lsls	r3, r3, #2
    1922:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:190
               NVIC_IP_PRI_22(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_22(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x00400000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x00400000);
    1924:	4b16      	ldr	r3, [pc, #88]	; (1980 <TU1_Init+0xcc>)
    1926:	4a16      	ldr	r2, [pc, #88]	; (1980 <TU1_Init+0xcc>)
    1928:	6812      	ldr	r2, [r2, #0]
    192a:	2180      	movs	r1, #128	; 0x80
    192c:	03c9      	lsls	r1, r1, #15
    192e:	430a      	orrs	r2, r1
    1930:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:192
  /* PIT_TCTRL0: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHN=0,TIE=1,TEN=0 */
  PIT_TCTRL0 = PIT_TCTRL_TIE_MASK;     /* Set up control register */
    1932:	4a12      	ldr	r2, [pc, #72]	; (197c <TU1_Init+0xc8>)
    1934:	2384      	movs	r3, #132	; 0x84
    1936:	005b      	lsls	r3, r3, #1
    1938:	2102      	movs	r1, #2
    193a:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:194
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
    193c:	4b0a      	ldr	r3, [pc, #40]	; (1968 <TU1_Init+0xb4>)
    193e:	68fa      	ldr	r2, [r7, #12]
    1940:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:195
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1942:	68fb      	ldr	r3, [r7, #12]
    1944:	e00c      	b.n	1960 <TU1_Init+0xac>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:165
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
  }
  else {
    /* Memory is already allocated */
    DeviceDataPrv = (TU1_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU1_ID];
    1946:	4b08      	ldr	r3, [pc, #32]	; (1968 <TU1_Init+0xb4>)
    1948:	689b      	ldr	r3, [r3, #8]
    194a:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:166
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	687a      	ldr	r2, [r7, #4]
    1950:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:167
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	781b      	ldrb	r3, [r3, #0]
    1956:	3301      	adds	r3, #1
    1958:	b2da      	uxtb	r2, r3
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:168
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    195e:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:196
  /* PIT_TCTRL0: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHN=0,TIE=1,TEN=0 */
  PIT_TCTRL0 = PIT_TCTRL_TIE_MASK;     /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
    1960:	1c18      	adds	r0, r3, #0
    1962:	46bd      	mov	sp, r7
    1964:	b004      	add	sp, #16
    1966:	bd80      	pop	{r7, pc}
    1968:	1ffff0a8 	.word	0x1ffff0a8
    196c:	1ffff138 	.word	0x1ffff138
    1970:	1ffff140 	.word	0x1ffff140
    1974:	40047000 	.word	0x40047000
    1978:	0000103c 	.word	0x0000103c
    197c:	40037000 	.word	0x40037000
    1980:	e000e100 	.word	0xe000e100
    1984:	ff3fffff 	.word	0xff3fffff

00001988 <TU1_Enable>:
TU1_Enable():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:218
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError TU1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
    1988:	b580      	push	{r7, lr}
    198a:	b082      	sub	sp, #8
    198c:	af00      	add	r7, sp, #0
    198e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:220
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  PIT_PDD_EnableDevice(PIT_BASE_PTR, PIT_PDD_CHANNEL_0, PDD_ENABLE); /* Enable the device */
    1990:	4a07      	ldr	r2, [pc, #28]	; (19b0 <TU1_Enable+0x28>)
    1992:	4907      	ldr	r1, [pc, #28]	; (19b0 <TU1_Enable+0x28>)
    1994:	2384      	movs	r3, #132	; 0x84
    1996:	005b      	lsls	r3, r3, #1
    1998:	58cb      	ldr	r3, [r1, r3]
    199a:	2101      	movs	r1, #1
    199c:	4319      	orrs	r1, r3
    199e:	2384      	movs	r3, #132	; 0x84
    19a0:	005b      	lsls	r3, r3, #1
    19a2:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:221
  return ERR_OK;
    19a4:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:222
}
    19a6:	1c18      	adds	r0, r3, #0
    19a8:	46bd      	mov	sp, r7
    19aa:	b002      	add	sp, #8
    19ac:	bd80      	pop	{r7, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	40037000 	.word	0x40037000

000019b4 <TU1_Disable>:
TU1_Disable():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:244
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError TU1_Disable(LDD_TDeviceData *DeviceDataPtr)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:246
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  PIT_PDD_EnableDevice(PIT_BASE_PTR, PIT_PDD_CHANNEL_0, PDD_DISABLE);
    19bc:	4a08      	ldr	r2, [pc, #32]	; (19e0 <TU1_Disable+0x2c>)
    19be:	4908      	ldr	r1, [pc, #32]	; (19e0 <TU1_Disable+0x2c>)
    19c0:	2384      	movs	r3, #132	; 0x84
    19c2:	005b      	lsls	r3, r3, #1
    19c4:	58cb      	ldr	r3, [r1, r3]
    19c6:	2101      	movs	r1, #1
    19c8:	1c18      	adds	r0, r3, #0
    19ca:	4388      	bics	r0, r1
    19cc:	1c01      	adds	r1, r0, #0
    19ce:	2384      	movs	r3, #132	; 0x84
    19d0:	005b      	lsls	r3, r3, #1
    19d2:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:247
  return ERR_OK;
    19d4:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:248
}
    19d6:	1c18      	adds	r0, r3, #0
    19d8:	46bd      	mov	sp, r7
    19da:	b002      	add	sp, #8
    19dc:	bd80      	pop	{r7, pc}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	40037000 	.word	0x40037000

000019e4 <TU1_Interrupt>:
TU1_Interrupt():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:305
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(TU1_Interrupt)
{
    19e4:	b580      	push	{r7, lr}
    19e6:	b082      	sub	sp, #8
    19e8:	af00      	add	r7, sp, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:307
  /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
  TU1_TDeviceDataPtr DeviceDataPrv = INT_PIT__DEFAULT_RTOS_ISRPARAM;
    19ea:	4b0a      	ldr	r3, [pc, #40]	; (1a14 <TU1_Interrupt+0x30>)
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	607b      	str	r3, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:309

  PIT_PDD_ClearInterruptFlag(PIT_BASE_PTR, PIT_PDD_CHANNEL_0); /* Clear interrupt flag */
    19f0:	4a09      	ldr	r2, [pc, #36]	; (1a18 <TU1_Interrupt+0x34>)
    19f2:	2386      	movs	r3, #134	; 0x86
    19f4:	005b      	lsls	r3, r3, #1
    19f6:	2101      	movs	r1, #1
    19f8:	50d1      	str	r1, [r2, r3]
    19fa:	4a07      	ldr	r2, [pc, #28]	; (1a18 <TU1_Interrupt+0x34>)
    19fc:	2380      	movs	r3, #128	; 0x80
    19fe:	005b      	lsls	r3, r3, #1
    1a00:	58d3      	ldr	r3, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:310
  TU1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	685b      	ldr	r3, [r3, #4]
    1a06:	1c18      	adds	r0, r3, #0
    1a08:	f000 f95e 	bl	1cc8 <TU1_OnCounterRestart>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU1.c:311
}
    1a0c:	46bd      	mov	sp, r7
    1a0e:	b002      	add	sp, #8
    1a10:	bd80      	pop	{r7, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	1ffff140 	.word	0x1ffff140
    1a18:	40037000 	.word	0x40037000

00001a1c <TU2_Init>:
TU2_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:197
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TU2_Init(LDD_TUserData *UserDataPtr)
{
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b084      	sub	sp, #16
    1a20:	af00      	add	r7, sp, #0
    1a22:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:200
  TU2_TDeviceData *DeviceDataPrv;

  if (PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU2_ID] == NULL) {
    1a24:	4b42      	ldr	r3, [pc, #264]	; (1b30 <TU2_Init+0x114>)
    1a26:	69db      	ldr	r3, [r3, #28]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d16f      	bne.n	1b0c <TU2_Init+0xf0>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:203
    /* Allocate device structure */
    /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
    DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1a2c:	4b41      	ldr	r3, [pc, #260]	; (1b34 <TU2_Init+0x118>)
    1a2e:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:204
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1a30:	68fb      	ldr	r3, [r7, #12]
    1a32:	687a      	ldr	r2, [r7, #4]
    1a34:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:205
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
    1a36:	68fb      	ldr	r3, [r7, #12]
    1a38:	2201      	movs	r2, #1
    1a3a:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:215
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  }
  /* SIM_SCGC6: TPM0=1 */
  SIM_SCGC6 |= SIM_SCGC6_TPM0_MASK;
    1a3c:	4a3e      	ldr	r2, [pc, #248]	; (1b38 <TU2_Init+0x11c>)
    1a3e:	493e      	ldr	r1, [pc, #248]	; (1b38 <TU2_Init+0x11c>)
    1a40:	4b3e      	ldr	r3, [pc, #248]	; (1b3c <TU2_Init+0x120>)
    1a42:	58cb      	ldr	r3, [r1, r3]
    1a44:	2180      	movs	r1, #128	; 0x80
    1a46:	0449      	lsls	r1, r1, #17
    1a48:	4319      	orrs	r1, r3
    1a4a:	4b3c      	ldr	r3, [pc, #240]	; (1b3c <TU2_Init+0x120>)
    1a4c:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:217
  /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=0,PS=0 */
  TPM0_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
    1a4e:	4b3c      	ldr	r3, [pc, #240]	; (1b40 <TU2_Init+0x124>)
    1a50:	2200      	movs	r2, #0
    1a52:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:219
  /* TPM0_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNT=0 */
  TPM0_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
    1a54:	4b3a      	ldr	r3, [pc, #232]	; (1b40 <TU2_Init+0x124>)
    1a56:	2200      	movs	r2, #0
    1a58:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:221
  /* TPM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C0SC = 0x00U;                   /* Clear channel status and control register */
    1a5a:	4b39      	ldr	r3, [pc, #228]	; (1b40 <TU2_Init+0x124>)
    1a5c:	2200      	movs	r2, #0
    1a5e:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:223
  /* TPM0_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C1SC = 0x00U;                   /* Clear channel status and control register */
    1a60:	4b37      	ldr	r3, [pc, #220]	; (1b40 <TU2_Init+0x124>)
    1a62:	2200      	movs	r2, #0
    1a64:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:225
  /* TPM0_C2SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C2SC = 0x00U;                   /* Clear channel status and control register */
    1a66:	4b36      	ldr	r3, [pc, #216]	; (1b40 <TU2_Init+0x124>)
    1a68:	2200      	movs	r2, #0
    1a6a:	61da      	str	r2, [r3, #28]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:227
  /* TPM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C3SC = 0x00U;                   /* Clear channel status and control register */
    1a6c:	4b34      	ldr	r3, [pc, #208]	; (1b40 <TU2_Init+0x124>)
    1a6e:	2200      	movs	r2, #0
    1a70:	625a      	str	r2, [r3, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:229
  /* TPM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C4SC = 0x00U;                   /* Clear channel status and control register */
    1a72:	4b33      	ldr	r3, [pc, #204]	; (1b40 <TU2_Init+0x124>)
    1a74:	2200      	movs	r2, #0
    1a76:	62da      	str	r2, [r3, #44]	; 0x2c
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:231
  /* TPM0_C5SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM0_C5SC = 0x00U;                   /* Clear channel status and control register */
    1a78:	4b31      	ldr	r3, [pc, #196]	; (1b40 <TU2_Init+0x124>)
    1a7a:	2200      	movs	r2, #0
    1a7c:	635a      	str	r2, [r3, #52]	; 0x34
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:233
  /* TPM0_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=0xFFFF */
  TPM0_MOD = TPM_MOD_MOD(0xFFFF);      /* Set up modulo register */
    1a7e:	4b30      	ldr	r3, [pc, #192]	; (1b40 <TU2_Init+0x124>)
    1a80:	4a30      	ldr	r2, [pc, #192]	; (1b44 <TU2_Init+0x128>)
    1a82:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:235
  /* TPM0_C2SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=1,MSA=0,ELSB=1,ELSA=1,??=0,DMA=0 */
  TPM0_C2SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel status and control register */
    1a84:	4b2e      	ldr	r3, [pc, #184]	; (1b40 <TU2_Init+0x124>)
    1a86:	222c      	movs	r2, #44	; 0x2c
    1a88:	61da      	str	r2, [r3, #28]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:237
  /* TPM0_C2V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=0 */
  TPM0_C2V = TPM_CnV_VAL(0x00);        /* Set up channel value register */
    1a8a:	4b2d      	ldr	r3, [pc, #180]	; (1b40 <TU2_Init+0x124>)
    1a8c:	2200      	movs	r2, #0
    1a8e:	621a      	str	r2, [r3, #32]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:239
  /* TPM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=1,MSA=0,ELSB=1,ELSA=1,??=0,DMA=0 */
  TPM0_C3SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel status and control register */
    1a90:	4b2b      	ldr	r3, [pc, #172]	; (1b40 <TU2_Init+0x124>)
    1a92:	222c      	movs	r2, #44	; 0x2c
    1a94:	625a      	str	r2, [r3, #36]	; 0x24
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:241
  /* TPM0_C3V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=0x6666 */
  TPM0_C3V = TPM_CnV_VAL(0x6666);      /* Set up channel value register */
    1a96:	4b2a      	ldr	r3, [pc, #168]	; (1b40 <TU2_Init+0x124>)
    1a98:	4a2b      	ldr	r2, [pc, #172]	; (1b48 <TU2_Init+0x12c>)
    1a9a:	629a      	str	r2, [r3, #40]	; 0x28
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:243
  /* TPM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=1,MSA=0,ELSB=1,ELSA=1,??=0,DMA=0 */
  TPM0_C0SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel status and control register */
    1a9c:	4b28      	ldr	r3, [pc, #160]	; (1b40 <TU2_Init+0x124>)
    1a9e:	222c      	movs	r2, #44	; 0x2c
    1aa0:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:245
  /* TPM0_C0V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=0 */
  TPM0_C0V = TPM_CnV_VAL(0x00);        /* Set up channel value register */
    1aa2:	4b27      	ldr	r3, [pc, #156]	; (1b40 <TU2_Init+0x124>)
    1aa4:	2200      	movs	r2, #0
    1aa6:	611a      	str	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:247
  /* TPM0_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=1,MSA=0,ELSB=1,ELSA=1,??=0,DMA=0 */
  TPM0_C1SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel status and control register */
    1aa8:	4b25      	ldr	r3, [pc, #148]	; (1b40 <TU2_Init+0x124>)
    1aaa:	222c      	movs	r2, #44	; 0x2c
    1aac:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:249
  /* TPM0_C1V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=0x6666 */
  TPM0_C1V = TPM_CnV_VAL(0x6666);      /* Set up channel value register */
    1aae:	4b24      	ldr	r3, [pc, #144]	; (1b40 <TU2_Init+0x124>)
    1ab0:	4a25      	ldr	r2, [pc, #148]	; (1b48 <TU2_Init+0x12c>)
    1ab2:	619a      	str	r2, [r3, #24]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:251
  /* PORTC_PCR3: ISF=0,MUX=4 */
  PORTC_PCR3 = (uint32_t)((PORTC_PCR3 & (uint32_t)~(uint32_t)(
    1ab4:	4b25      	ldr	r3, [pc, #148]	; (1b4c <TU2_Init+0x130>)
    1ab6:	4a25      	ldr	r2, [pc, #148]	; (1b4c <TU2_Init+0x130>)
    1ab8:	68d1      	ldr	r1, [r2, #12]
    1aba:	4a25      	ldr	r2, [pc, #148]	; (1b50 <TU2_Init+0x134>)
    1abc:	400a      	ands	r2, r1
    1abe:	2180      	movs	r1, #128	; 0x80
    1ac0:	00c9      	lsls	r1, r1, #3
    1ac2:	430a      	orrs	r2, r1
    1ac4:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:258
                PORT_PCR_MUX(0x03)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x04)
               ));
  /* PORTC_PCR4: ISF=0,MUX=4 */
  PORTC_PCR4 = (uint32_t)((PORTC_PCR4 & (uint32_t)~(uint32_t)(
    1ac6:	4b21      	ldr	r3, [pc, #132]	; (1b4c <TU2_Init+0x130>)
    1ac8:	4a20      	ldr	r2, [pc, #128]	; (1b4c <TU2_Init+0x130>)
    1aca:	6911      	ldr	r1, [r2, #16]
    1acc:	4a20      	ldr	r2, [pc, #128]	; (1b50 <TU2_Init+0x134>)
    1ace:	400a      	ands	r2, r1
    1ad0:	2180      	movs	r1, #128	; 0x80
    1ad2:	00c9      	lsls	r1, r1, #3
    1ad4:	430a      	orrs	r2, r1
    1ad6:	611a      	str	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:265
                PORT_PCR_MUX(0x03)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x04)
               ));
  /* PORTC_PCR1: ISF=0,MUX=4 */
  PORTC_PCR1 = (uint32_t)((PORTC_PCR1 & (uint32_t)~(uint32_t)(
    1ad8:	4b1c      	ldr	r3, [pc, #112]	; (1b4c <TU2_Init+0x130>)
    1ada:	4a1c      	ldr	r2, [pc, #112]	; (1b4c <TU2_Init+0x130>)
    1adc:	6851      	ldr	r1, [r2, #4]
    1ade:	4a1c      	ldr	r2, [pc, #112]	; (1b50 <TU2_Init+0x134>)
    1ae0:	400a      	ands	r2, r1
    1ae2:	2180      	movs	r1, #128	; 0x80
    1ae4:	00c9      	lsls	r1, r1, #3
    1ae6:	430a      	orrs	r2, r1
    1ae8:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:272
                PORT_PCR_MUX(0x03)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x04)
               ));
  /* PORTC_PCR2: ISF=0,MUX=4 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
    1aea:	4b18      	ldr	r3, [pc, #96]	; (1b4c <TU2_Init+0x130>)
    1aec:	4a17      	ldr	r2, [pc, #92]	; (1b4c <TU2_Init+0x130>)
    1aee:	6891      	ldr	r1, [r2, #8]
    1af0:	4a17      	ldr	r2, [pc, #92]	; (1b50 <TU2_Init+0x134>)
    1af2:	400a      	ands	r2, r1
    1af4:	2180      	movs	r1, #128	; 0x80
    1af6:	00c9      	lsls	r1, r1, #3
    1af8:	430a      	orrs	r2, r1
    1afa:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:279
                PORT_PCR_MUX(0x03)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x04)
               ));
  /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=1,PS=3 */
  TPM0_SC = (TPM_SC_CMOD(0x01) | TPM_SC_PS(0x03)); /* Set up status and control register */
    1afc:	4b10      	ldr	r3, [pc, #64]	; (1b40 <TU2_Init+0x124>)
    1afe:	220b      	movs	r2, #11
    1b00:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:281
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU2_ID,DeviceDataPrv);
    1b02:	4b0b      	ldr	r3, [pc, #44]	; (1b30 <TU2_Init+0x114>)
    1b04:	68fa      	ldr	r2, [r7, #12]
    1b06:	61da      	str	r2, [r3, #28]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:282
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1b08:	68fb      	ldr	r3, [r7, #12]
    1b0a:	e00c      	b.n	1b26 <TU2_Init+0x10a>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:209
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
  }
  else {
    /* Memory is already allocated */
    DeviceDataPrv = (TU2_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU2_ID];
    1b0c:	4b08      	ldr	r3, [pc, #32]	; (1b30 <TU2_Init+0x114>)
    1b0e:	69db      	ldr	r3, [r3, #28]
    1b10:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:210
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1b12:	68fb      	ldr	r3, [r7, #12]
    1b14:	687a      	ldr	r2, [r7, #4]
    1b16:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:211
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    1b18:	68fb      	ldr	r3, [r7, #12]
    1b1a:	781b      	ldrb	r3, [r3, #0]
    1b1c:	3301      	adds	r3, #1
    1b1e:	b2da      	uxtb	r2, r3
    1b20:	68fb      	ldr	r3, [r7, #12]
    1b22:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:212
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1b24:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU2.c:283
  /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=1,PS=3 */
  TPM0_SC = (TPM_SC_CMOD(0x01) | TPM_SC_PS(0x03)); /* Set up status and control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU2_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
    1b26:	1c18      	adds	r0, r3, #0
    1b28:	46bd      	mov	sp, r7
    1b2a:	b004      	add	sp, #16
    1b2c:	bd80      	pop	{r7, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	1ffff0a8 	.word	0x1ffff0a8
    1b34:	1ffff144 	.word	0x1ffff144
    1b38:	40047000 	.word	0x40047000
    1b3c:	0000103c 	.word	0x0000103c
    1b40:	40038000 	.word	0x40038000
    1b44:	0000ffff 	.word	0x0000ffff
    1b48:	00006666 	.word	0x00006666
    1b4c:	4004b000 	.word	0x4004b000
    1b50:	fefff8ff 	.word	0xfefff8ff

00001b54 <TU3_Init>:
TU3_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:167
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TU3_Init(LDD_TUserData *UserDataPtr)
{
    1b54:	b580      	push	{r7, lr}
    1b56:	b084      	sub	sp, #16
    1b58:	af00      	add	r7, sp, #0
    1b5a:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:170
  TU3_TDeviceData *DeviceDataPrv;

  if (PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU3_ID] == NULL) {
    1b5c:	4b25      	ldr	r3, [pc, #148]	; (1bf4 <TU3_Init+0xa0>)
    1b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1b60:	2b00      	cmp	r3, #0
    1b62:	d136      	bne.n	1bd2 <TU3_Init+0x7e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:173
    /* Allocate device structure */
    /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
    DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1b64:	4b24      	ldr	r3, [pc, #144]	; (1bf8 <TU3_Init+0xa4>)
    1b66:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:174
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	687a      	ldr	r2, [r7, #4]
    1b6c:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:175
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
    1b6e:	68fb      	ldr	r3, [r7, #12]
    1b70:	2201      	movs	r2, #1
    1b72:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:185
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  }
  /* SIM_SCGC6: TPM1=1 */
  SIM_SCGC6 |= SIM_SCGC6_TPM1_MASK;
    1b74:	4a21      	ldr	r2, [pc, #132]	; (1bfc <TU3_Init+0xa8>)
    1b76:	4921      	ldr	r1, [pc, #132]	; (1bfc <TU3_Init+0xa8>)
    1b78:	4b21      	ldr	r3, [pc, #132]	; (1c00 <TU3_Init+0xac>)
    1b7a:	58cb      	ldr	r3, [r1, r3]
    1b7c:	2180      	movs	r1, #128	; 0x80
    1b7e:	0489      	lsls	r1, r1, #18
    1b80:	4319      	orrs	r1, r3
    1b82:	4b1f      	ldr	r3, [pc, #124]	; (1c00 <TU3_Init+0xac>)
    1b84:	50d1      	str	r1, [r2, r3]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:187
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=0,PS=0 */
  TPM1_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
    1b86:	4b1f      	ldr	r3, [pc, #124]	; (1c04 <TU3_Init+0xb0>)
    1b88:	2200      	movs	r2, #0
    1b8a:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:189
  /* TPM1_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNT=0 */
  TPM1_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
    1b8c:	4b1d      	ldr	r3, [pc, #116]	; (1c04 <TU3_Init+0xb0>)
    1b8e:	2200      	movs	r2, #0
    1b90:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:191
  /* TPM1_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM1_C0SC = 0x00U;                   /* Clear channel status and control register */
    1b92:	4b1c      	ldr	r3, [pc, #112]	; (1c04 <TU3_Init+0xb0>)
    1b94:	2200      	movs	r2, #0
    1b96:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:193
  /* TPM1_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=0,MSA=0,ELSB=0,ELSA=0,??=0,DMA=0 */
  TPM1_C1SC = 0x00U;                   /* Clear channel status and control register */
    1b98:	4b1a      	ldr	r3, [pc, #104]	; (1c04 <TU3_Init+0xb0>)
    1b9a:	2200      	movs	r2, #0
    1b9c:	615a      	str	r2, [r3, #20]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:195
  /* TPM1_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=0xCCCC */
  TPM1_MOD = TPM_MOD_MOD(0xCCCC);      /* Set up modulo register */
    1b9e:	4b19      	ldr	r3, [pc, #100]	; (1c04 <TU3_Init+0xb0>)
    1ba0:	4a19      	ldr	r2, [pc, #100]	; (1c08 <TU3_Init+0xb4>)
    1ba2:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:197
  /* TPM1_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CHF=0,CHIE=0,MSB=1,MSA=0,ELSB=1,ELSA=1,??=0,DMA=0 */
  TPM1_C0SC = (TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel status and control register */
    1ba4:	4b17      	ldr	r3, [pc, #92]	; (1c04 <TU3_Init+0xb0>)
    1ba6:	222c      	movs	r2, #44	; 0x2c
    1ba8:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:199
  /* TPM1_C0V: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,VAL=0xBDF4 */
  TPM1_C0V = TPM_CnV_VAL(0xBDF4);      /* Set up channel value register */
    1baa:	4b16      	ldr	r3, [pc, #88]	; (1c04 <TU3_Init+0xb0>)
    1bac:	4a17      	ldr	r2, [pc, #92]	; (1c0c <TU3_Init+0xb8>)
    1bae:	611a      	str	r2, [r3, #16]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:201
  /* PORTB_PCR0: ISF=0,MUX=3 */
  PORTB_PCR0 = (uint32_t)((PORTB_PCR0 & (uint32_t)~(uint32_t)(
    1bb0:	4b17      	ldr	r3, [pc, #92]	; (1c10 <TU3_Init+0xbc>)
    1bb2:	4a17      	ldr	r2, [pc, #92]	; (1c10 <TU3_Init+0xbc>)
    1bb4:	6811      	ldr	r1, [r2, #0]
    1bb6:	4a17      	ldr	r2, [pc, #92]	; (1c14 <TU3_Init+0xc0>)
    1bb8:	400a      	ands	r2, r1
    1bba:	21c0      	movs	r1, #192	; 0xc0
    1bbc:	0089      	lsls	r1, r1, #2
    1bbe:	430a      	orrs	r2, r1
    1bc0:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:208
                PORT_PCR_MUX(0x04)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x03)
               ));
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=1,PS=3 */
  TPM1_SC = (TPM_SC_CMOD(0x01) | TPM_SC_PS(0x03)); /* Set up status and control register */
    1bc2:	4b10      	ldr	r3, [pc, #64]	; (1c04 <TU3_Init+0xb0>)
    1bc4:	220b      	movs	r2, #11
    1bc6:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:210
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU3_ID,DeviceDataPrv);
    1bc8:	4b0a      	ldr	r3, [pc, #40]	; (1bf4 <TU3_Init+0xa0>)
    1bca:	68fa      	ldr	r2, [r7, #12]
    1bcc:	631a      	str	r2, [r3, #48]	; 0x30
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:211
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1bce:	68fb      	ldr	r3, [r7, #12]
    1bd0:	e00c      	b.n	1bec <TU3_Init+0x98>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:179
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    DeviceDataPrv->InitCntr = 1U;      /* First initialization */
  }
  else {
    /* Memory is already allocated */
    DeviceDataPrv = (TU3_TDeviceDataPtr) PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TU3_ID];
    1bd2:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <TU3_Init+0xa0>)
    1bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1bd6:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:180
    DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	687a      	ldr	r2, [r7, #4]
    1bdc:	605a      	str	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:181
    DeviceDataPrv->InitCntr++;         /* Increment counter of initialization */
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	3301      	adds	r3, #1
    1be4:	b2da      	uxtb	r2, r3
    1be6:	68fb      	ldr	r3, [r7, #12]
    1be8:	701a      	strb	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:182
    return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1bea:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TU3.c:212
  /* TPM1_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,DMA=0,TOF=0,TOIE=0,CPWMS=0,CMOD=1,PS=3 */
  TPM1_SC = (TPM_SC_CMOD(0x01) | TPM_SC_PS(0x03)); /* Set up status and control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU3_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
    1bec:	1c18      	adds	r0, r3, #0
    1bee:	46bd      	mov	sp, r7
    1bf0:	b004      	add	sp, #16
    1bf2:	bd80      	pop	{r7, pc}
    1bf4:	1ffff0a8 	.word	0x1ffff0a8
    1bf8:	1ffff14c 	.word	0x1ffff14c
    1bfc:	40047000 	.word	0x40047000
    1c00:	0000103c 	.word	0x0000103c
    1c04:	40039000 	.word	0x40039000
    1c08:	0000cccc 	.word	0x0000cccc
    1c0c:	0000bdf4 	.word	0x0000bdf4
    1c10:	4004a000 	.word	0x4004a000
    1c14:	fefff8ff 	.word	0xfefff8ff

00001c18 <TimerIntLdd1_Init>:
TimerIntLdd1_Init():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:145
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* TimerIntLdd1_Init(LDD_TUserData *UserDataPtr)
{
    1c18:	b580      	push	{r7, lr}
    1c1a:	b084      	sub	sp, #16
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:149
  /* Allocate device structure */
  TimerIntLdd1_TDeviceData *DeviceDataPrv;
  /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
    1c20:	4b0f      	ldr	r3, [pc, #60]	; (1c60 <TimerIntLdd1_Init+0x48>)
    1c22:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:150
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
    1c24:	68fb      	ldr	r3, [r7, #12]
    1c26:	687a      	ldr	r2, [r7, #4]
    1c28:	609a      	str	r2, [r3, #8]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:151
  DeviceDataPrv->EnUser = FALSE;       /* Set the flag "device disabled" */
    1c2a:	68fb      	ldr	r3, [r7, #12]
    1c2c:	2200      	movs	r2, #0
    1c2e:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:153
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TimerIntLdd1_ID,DeviceDataPrv);
    1c30:	4b0c      	ldr	r3, [pc, #48]	; (1c64 <TimerIntLdd1_Init+0x4c>)
    1c32:	68fa      	ldr	r2, [r7, #12]
    1c34:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:154
  DeviceDataPrv->LinkedDeviceDataPtr = TU1_Init((LDD_TUserData *)NULL);
    1c36:	2000      	movs	r0, #0
    1c38:	f7ff fe3c 	bl	18b4 <TU1_Init>
    1c3c:	1c02      	adds	r2, r0, #0
    1c3e:	68fb      	ldr	r3, [r7, #12]
    1c40:	601a      	str	r2, [r3, #0]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:155
  if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful? */
    1c42:	68fb      	ldr	r3, [r7, #12]
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d104      	bne.n	1c54 <TimerIntLdd1_Init+0x3c>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:157
    /* Unregistration of the device structure */
    PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_TimerIntLdd1_ID);
    1c4a:	4b06      	ldr	r3, [pc, #24]	; (1c64 <TimerIntLdd1_Init+0x4c>)
    1c4c:	2200      	movs	r2, #0
    1c4e:	60da      	str	r2, [r3, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:160
    /* Deallocation of the device structure */
    /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deallocation code is generated */
    return NULL;                       /* If so, then the TimerInt initialization is also unsuccessful */
    1c50:	2300      	movs	r3, #0
    1c52:	e000      	b.n	1c56 <TimerIntLdd1_Init+0x3e>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:162
  }
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
    1c54:	68fb      	ldr	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:163
}
    1c56:	1c18      	adds	r0, r3, #0
    1c58:	46bd      	mov	sp, r7
    1c5a:	b004      	add	sp, #16
    1c5c:	bd80      	pop	{r7, pc}
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	1ffff154 	.word	0x1ffff154
    1c64:	1ffff0a8 	.word	0x1ffff0a8

00001c68 <TimerIntLdd1_Enable>:
TimerIntLdd1_Enable():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:184
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError TimerIntLdd1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
    1c68:	b580      	push	{r7, lr}
    1c6a:	b084      	sub	sp, #16
    1c6c:	af00      	add	r7, sp, #0
    1c6e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:185
  TimerIntLdd1_TDeviceData *DeviceDataPrv = (TimerIntLdd1_TDeviceData *)DeviceDataPtr;
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:187

  if (!DeviceDataPrv->EnUser) {        /* Is the device disabled by user? */
    1c74:	68fb      	ldr	r3, [r7, #12]
    1c76:	791b      	ldrb	r3, [r3, #4]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d107      	bne.n	1c8c <TimerIntLdd1_Enable+0x24>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:188
    DeviceDataPrv->EnUser = TRUE;      /* If yes then set the flag "device enabled" */
    1c7c:	68fb      	ldr	r3, [r7, #12]
    1c7e:	2201      	movs	r2, #1
    1c80:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:189
    (void)TU1_Enable(DeviceDataPrv->LinkedDeviceDataPtr); /* Enable TimerUnit */
    1c82:	68fb      	ldr	r3, [r7, #12]
    1c84:	681b      	ldr	r3, [r3, #0]
    1c86:	1c18      	adds	r0, r3, #0
    1c88:	f7ff fe7e 	bl	1988 <TU1_Enable>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:191
  }
  return ERR_OK;
    1c8c:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:192
}
    1c8e:	1c18      	adds	r0, r3, #0
    1c90:	46bd      	mov	sp, r7
    1c92:	b004      	add	sp, #16
    1c94:	bd80      	pop	{r7, pc}
    1c96:	46c0      	nop			; (mov r8, r8)

00001c98 <TimerIntLdd1_Disable>:
TimerIntLdd1_Disable():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:213
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError TimerIntLdd1_Disable(LDD_TDeviceData *DeviceDataPtr)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	b084      	sub	sp, #16
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:214
  TimerIntLdd1_TDeviceData *DeviceDataPrv = (TimerIntLdd1_TDeviceData *)DeviceDataPtr;
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:216

  if (DeviceDataPrv->EnUser) {         /* Is the device enabled by user? */
    1ca4:	68fb      	ldr	r3, [r7, #12]
    1ca6:	791b      	ldrb	r3, [r3, #4]
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d007      	beq.n	1cbc <TimerIntLdd1_Disable+0x24>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:217
    DeviceDataPrv->EnUser = FALSE;     /* If yes then set the flag "device enabled" */
    1cac:	68fb      	ldr	r3, [r7, #12]
    1cae:	2200      	movs	r2, #0
    1cb0:	711a      	strb	r2, [r3, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:218
   (void)TU1_Disable(DeviceDataPrv->LinkedDeviceDataPtr); /* Disable TimerUnit component */
    1cb2:	68fb      	ldr	r3, [r7, #12]
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	1c18      	adds	r0, r3, #0
    1cb8:	f7ff fe7c 	bl	19b4 <TU1_Disable>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:220
  }
  return ERR_OK;
    1cbc:	2300      	movs	r3, #0
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:221
}
    1cbe:	1c18      	adds	r0, r3, #0
    1cc0:	46bd      	mov	sp, r7
    1cc2:	b004      	add	sp, #16
    1cc4:	bd80      	pop	{r7, pc}
    1cc6:	46c0      	nop			; (mov r8, r8)

00001cc8 <TU1_OnCounterRestart>:
TU1_OnCounterRestart():
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:272
**         eventually invokes event TimerIntLdd1_OnInterrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void TU1_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	b084      	sub	sp, #16
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:273
  TimerIntLdd1_TDeviceData *DeviceDataPrv = PE_LDD_DeviceDataList[PE_LDD_COMPONENT_TimerIntLdd1_ID];
    1cd0:	4b05      	ldr	r3, [pc, #20]	; (1ce8 <TU1_OnCounterRestart+0x20>)
    1cd2:	68db      	ldr	r3, [r3, #12]
    1cd4:	60fb      	str	r3, [r7, #12]
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:276

  (void)UserDataPtr;                   /* Parameter is not used, suppress unused argument warning */
  TimerIntLdd1_OnInterrupt(DeviceDataPrv->UserDataPtr); /* Invoke OnInterrupt event */
    1cd6:	68fb      	ldr	r3, [r7, #12]
    1cd8:	689b      	ldr	r3, [r3, #8]
    1cda:	1c18      	adds	r0, r3, #0
    1cdc:	f7ff f974 	bl	fc8 <TimerIntLdd1_OnInterrupt>
/home/marcelo/Documentos/GER/SDP/SDP-2016/KDS/SDP-2016/Debug/../Generated_Code/TimerIntLdd1.c:277
}
    1ce0:	46bd      	mov	sp, r7
    1ce2:	b004      	add	sp, #16
    1ce4:	bd80      	pop	{r7, pc}
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	1ffff0a8 	.word	0x1ffff0a8

00001cec <exit>:
exit():
    1cec:	4b08      	ldr	r3, [pc, #32]	; (1d10 <exit+0x24>)
    1cee:	b510      	push	{r4, lr}
    1cf0:	1c04      	adds	r4, r0, #0
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d002      	beq.n	1cfc <exit+0x10>
    1cf6:	2100      	movs	r1, #0
    1cf8:	e000      	b.n	1cfc <exit+0x10>
    1cfa:	bf00      	nop
    1cfc:	4b05      	ldr	r3, [pc, #20]	; (1d14 <exit+0x28>)
    1cfe:	6818      	ldr	r0, [r3, #0]
    1d00:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1d02:	2b00      	cmp	r3, #0
    1d04:	d000      	beq.n	1d08 <exit+0x1c>
    1d06:	4798      	blx	r3
    1d08:	1c20      	adds	r0, r4, #0
    1d0a:	f000 f833 	bl	1d74 <_exit>
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00000000 	.word	0x00000000
    1d14:	00001d90 	.word	0x00001d90

00001d18 <__libc_init_array>:
__libc_init_array():
    1d18:	b570      	push	{r4, r5, r6, lr}
    1d1a:	4b0e      	ldr	r3, [pc, #56]	; (1d54 <__libc_init_array+0x3c>)
    1d1c:	4d0e      	ldr	r5, [pc, #56]	; (1d58 <__libc_init_array+0x40>)
    1d1e:	2400      	movs	r4, #0
    1d20:	1aed      	subs	r5, r5, r3
    1d22:	10ad      	asrs	r5, r5, #2
    1d24:	1c1e      	adds	r6, r3, #0
    1d26:	42ac      	cmp	r4, r5
    1d28:	d004      	beq.n	1d34 <__libc_init_array+0x1c>
    1d2a:	00a3      	lsls	r3, r4, #2
    1d2c:	58f3      	ldr	r3, [r6, r3]
    1d2e:	4798      	blx	r3
    1d30:	3401      	adds	r4, #1
    1d32:	e7f8      	b.n	1d26 <__libc_init_array+0xe>
    1d34:	f000 f82e 	bl	1d94 <_init>
    1d38:	4b08      	ldr	r3, [pc, #32]	; (1d5c <__libc_init_array+0x44>)
    1d3a:	4d09      	ldr	r5, [pc, #36]	; (1d60 <__libc_init_array+0x48>)
    1d3c:	2400      	movs	r4, #0
    1d3e:	1aed      	subs	r5, r5, r3
    1d40:	10ad      	asrs	r5, r5, #2
    1d42:	1c1e      	adds	r6, r3, #0
    1d44:	42ac      	cmp	r4, r5
    1d46:	d004      	beq.n	1d52 <__libc_init_array+0x3a>
    1d48:	00a3      	lsls	r3, r4, #2
    1d4a:	58f3      	ldr	r3, [r6, r3]
    1d4c:	4798      	blx	r3
    1d4e:	3401      	adds	r4, #1
    1d50:	e7f8      	b.n	1d44 <__libc_init_array+0x2c>
    1d52:	bd70      	pop	{r4, r5, r6, pc}
    1d54:	00001db4 	.word	0x00001db4
    1d58:	00001db4 	.word	0x00001db4
    1d5c:	00001db4 	.word	0x00001db4
    1d60:	00001db8 	.word	0x00001db8

00001d64 <memset>:
memset():
    1d64:	1c03      	adds	r3, r0, #0
    1d66:	1882      	adds	r2, r0, r2
    1d68:	4293      	cmp	r3, r2
    1d6a:	d002      	beq.n	1d72 <memset+0xe>
    1d6c:	7019      	strb	r1, [r3, #0]
    1d6e:	3301      	adds	r3, #1
    1d70:	e7fa      	b.n	1d68 <memset+0x4>
    1d72:	4770      	bx	lr

00001d74 <_exit>:
_exit():
    1d74:	e7fe      	b.n	1d74 <_exit>
    1d76:	46c0      	nop			; (mov r8, r8)
$d():
    1d78:	00000766 	.word	0x00000766
    1d7c:	00000782 	.word	0x00000782
    1d80:	000007b4 	.word	0x000007b4
    1d84:	00000708 	.word	0x00000708
    1d88:	000007c6 	.word	0x000007c6
    1d8c:	00000043 	.word	0x00000043

00001d90 <_global_impure_ptr>:
    1d90:	1ffff000                                ....

00001d94 <_init>:
$t():
    1d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d9a:	bc08      	pop	{r3}
    1d9c:	469e      	mov	lr, r3
    1d9e:	4770      	bx	lr

00001da0 <_fini>:
    1da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1da6:	bc08      	pop	{r3}
    1da8:	469e      	mov	lr, r3
    1daa:	4770      	bx	lr
